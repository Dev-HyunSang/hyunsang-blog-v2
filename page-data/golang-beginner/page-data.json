{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/golang-beginner/",
    "result": {"data":{"cur":{"id":"fdd3bf5f-ae80-50af-bd98-44fdc0e421bb","html":"<p>Go언어를 처음으로 입문하시는 분들을 위해서 다양한 자료들을 글로써 정리해보고자 합니다!</p>\n<h2 id=\"들어가기-앞써서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%8D%A8%EC%84%9C\" aria-label=\"들어가기 앞써서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞써서</h2>\n<p>일단 저는 다양한 자료를 접하고 기본적인 문법을 공부하고 나서는 제 스스로 만들어보고 싶은 것들을 만들어 보고자 노력합니다.<br>\n만약 코딩에 대해서 자신이 흥미가 없는데 억지로 공부하는 것은 올바르지 않는 방법이 될 수도 있습니다.<br>\n자신이 코딩에 관심과 흥미를 가지면 조금 더 빠르게 자신이 원하는 프로그래밍 언어를 공부할 수 있다고 생각합니다.</p>\n<h2 id=\"문법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95\" aria-label=\"문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법</h2>\n<h3 id=\"온라인-문서\" style=\"position:relative;\"><a href=\"#%EC%98%A8%EB%9D%BC%EC%9D%B8-%EB%AC%B8%EC%84%9C\" aria-label=\"온라인 문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>온라인 문서</h3>\n<ul>\n<li><a href=\"https://go.dev/doc/\">golang.org - Getting started</a></li>\n<li><a href=\"http://golang.site/\">예제로 배우는 Go 프로그래밍</a></li>\n<li><a href=\"https://pyrasis.com/go.html\">가장 빨리 만나는 Go 언어</a></li>\n</ul>\n<h3 id=\"영상\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%83%81\" aria-label=\"영상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영상</h3>\n<ul>\n<li><a href=\"https://youtube.com/playlist?list=PLy-g2fnSzUTBHwuXkWQ834QHDZwLx6v6j\">Tucker의 Go 언어 프로그래밍</a></li>\n<li><a href=\"https://youtu.be/YS4e4q9oBaU\">Learn Go Programming - Golang Tutorial for Beginners</a></li>\n</ul>\n<h2 id=\"back-end--server\" style=\"position:relative;\"><a href=\"#back-end--server\" aria-label=\"back end  server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back-End · Server</h2>\n<h3 id=\"framework\" style=\"position:relative;\"><a href=\"#framework\" aria-label=\"framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Framework</h3>\n<p>프레임워크를 선택함에 있어서 <a href=\"https://www.reddit.com/r/golang/comments/q3r8qo/do_you_guys_use_frameworks_with_go_for_backend/\">Do you guys use frameworks with Go for backend development?</a>, <a href=\"https://github.com/mingrammer/go-web-framework-stars\">Top Go Web Frameworks</a>를 살펴보시길 추천드립니다.</p>\n<ul>\n<li><a href=\"https://github.com/gofiber/fiber\"><code class=\"language-text\">gofiber/fiber</code></a></li>\n<li><a href=\"https://github.com/gin-gonic/gin\"><code class=\"language-text\">gin-gonic/gin</code></a></li>\n<li><a href=\"https://github.com/labstack/echo\"><code class=\"language-text\">labstack/echo</code></a></li>\n<li><a href=\"https://github.com/valyala/fasthttp\"><code class=\"language-text\">valyala/fasthttp</code></a></li>\n</ul>\n<h3 id=\"영상-1\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%83%81-1\" aria-label=\"영상 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영상</h3>\n<ul>\n<li><a href=\"https://youtube.com/playlist?list=PLy-g2fnSzUTDALoERcKDniql16SAaQYHF\">Go 로 만드는 웹</a></li>\n<li><a href=\"https://youtu.be/jFfo23yIWac\">Learn Go Programming by Building 11 Projects – Full Course</a></li>\n<li><a href=\"https://youtube.com/playlist?list=PLve39GJ2D71yyECswi0lVaBm_gbnDRR9v\">Golang Web App</a></li>\n</ul>\n<h2 id=\"ormobject-relational-mapping\" style=\"position:relative;\"><a href=\"#ormobject-relational-mapping\" aria-label=\"ormobject relational mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ORM(Object Relational Mapping)</h2>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2019/02/01/orm.html\">[DB] ORM이란</a></li>\n<li><a href=\"https://blog.billo.io/devposts/go_orm_recommandation/\">Golang ORM, 무엇이 좋을까?</a></li>\n<li><a href=\"https://www.joinc.co.kr/w/man/12/gorm\">Golang 에서의 ORM (GORM)</a></li>\n<li><a href=\"https://velog.io/@leeeeeoy/Go-Ent-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">[Go] Ent 사용해보기</a></li>\n<li><a href=\"https://www.vompressor.com/entgo1/\">[Lib] entgo 1 - Go의 ORM 라이브러리</a></li>\n</ul>\n<h3 id=\"framework-1\" style=\"position:relative;\"><a href=\"#framework-1\" aria-label=\"framework 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Framework</h3>\n<p>프레임워크를 선택함에 있어서 <a href=\"https://github.com/d-tsuji/awesome-go-orms\">Top Go ORMs</a>를 살펴보시길 추천드립니다.</p>\n<ul>\n<li><a href=\"https://github.com/ent/ent\"><code class=\"language-text\">ent/ent</code></a> with Meta\n<ul>\n<li>개인적으로 <code class=\"language-text\">ent/ent</code>를 가장 추천드립니다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/go-gorm/gorm\"><code class=\"language-text\">go-gorm/gorm</code></a></li>\n</ul>","excerpt":"Go언어를 처음으로 입문하시는 분들을 위해서 다양한 자료들을 글로써 정리해보고자 합니다! 들어가기 앞써서 일단 저는 다양한 자료를 접하고 기본적인 문법을 공부하고 나서는 제 스스로 만들어보고 싶은 것들을 만들어 보고자 노력합니다. 만약 코딩에 대해서 자신이 흥미가 없는데 억지로 공부하는 것은 올바르지 않는 방법이 될 수도 있습니다. 자신이 코딩에 관심과 흥미를 가지면 조금 더 빠르게 자신이 원하는 프로그래밍 언어를 공부할 수 있다고 생각합니다. 문법 온라인 문서 golang.org - Getting started 예제로 배우는 Go 프로그래밍 가장 빨리 만나는 Go 언어 영상 Tucker의 Go 언어 프로그래밍 Learn Go Programming - Golang Tutorial for Beginners Back-End · Server Framework 프레임워크를 선택함에 있어서 Do you guys use frameworks with Go for backend developme…","frontmatter":{"date":"November 24, 2022","title":"Go언어 입문자들을 위한 자료","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/golang-beginner/"}},"next":{"id":"1a378814-fccf-5a40-8907-db4307546056","html":"<p>요즘 회사에서 새로운 프로젝트를 <a href=\"https://www.rust-lang.org/\">Rust</a>으로 진행한다고 해서 Rust를 공부하던 도중 제가 예전에도 지금에도 어려워하고 있는 메모리를 조금 더 깊게 공부하고 싶다는 생각이 들어서 제가 메인으로 사용하는 Go언어에서 메모리는 어떻게 사용될지 정리해 보고자 이렇게 글을 작성합니다.</p>\n<blockquote>\n<p><em><strong>본 글은 GC(Garbage Collection)에 대해서 중점적으로 서술합니다.</strong></em><br>\n<strong><a href=\"https://velog.io/@kineo2k/Go-%EC%96%B8%EC%96%B4%EC%9D%98-GC\">Go 언어의 GC</a>를 참고하여 작성하였습니다.</strong></p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/1400/1*RUBHi-DlwpigyGLRDGAEIg.webp\" alt=\"쓰레기 버리는 Gopher\"></p>\n<h2 id=\"가비지-컬렉션이란\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%B4%EB%9E%80\" aria-label=\"가비지 컬렉션이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지 컬렉션이란</h2>\n<p>본격적으로 들어가기 전에 가비지 컬렉션(GC, Garbage Collection)를 알아보고자 합니다.<br>\n가비지는 <strong>유효하지 않는 메모리 주소</strong>, <strong>해제되지 않은 영역</strong>를 의미합니다.<br>\n프로그래밍 언어에서는 통상 ‘Danling Ojbect’으로 불리고 있으며, Java나 Go에서는 Garbage라는 용어를 사용하고 있습니다.</p>\n<p>옛날 언어들은 BASIC처럼 동적인 메모리 할당 기능이 없어서 FORTRAN, C언어처럼 프로그래머가 할당한 뒤 수동으로 해제 해야하는 방식을 사용했습니다.<br>\n프로그래머가 메모리를 할당해놓고 필요없어진 뒤에도 해제를 안 해서 메모리 누수가 생기거나, 혹은 거꾸로 해제했던 메모리를 실수로 다시 사용하거나, 해제했던 메모리를 또 해제한다거나 하는 온갖 실수가 일어나서 오류가 많이 발생하였습니다.</p>\n<p>이러한 문제들을 해결하기 위해서 제시된 방법이 가비지 컬렉션입니다. 가비지 컬렉션 기능을 채택한 언어의 경우에는 가비지 컬렉션에서 제공하는 할당과 해제를 이용하여 자동적으로 프로그램이 실행되며 생기는 쓸모없어지는 메모리들을 수집하고 관리해줍니다.</p>\n<p>메모리와 관련되어서 <a href=\"https://showx123.tistory.com/59\">double free 취약점</a>, <a href=\"https://nextline.tistory.com/81\">Memory Corruption 취약점</a> 등의 보안적 문제가 발생할 수 있습니다.</p>\n<h2 id=\"golang-with-gc\" style=\"position:relative;\"><a href=\"#golang-with-gc\" aria-label=\"golang with gc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Golang with GC</h2>\n<p><a href=\"https://pkg.go.dev/runtime\">runtime</a> 패키지의 <a href=\"https://go.dev/src/runtime/mgc.go\"><code class=\"language-text\">mgc.go</code></a>에 서술되어 있는 Go언어 GC(Garbage Collection)에 대한 설명입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Garbage collector (GC).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple</span>\n<span class=\"token comment\">// GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier. It is</span>\n<span class=\"token comment\">// non-generational and non-compacting. Allocation is done using size segregated per P allocation</span>\n<span class=\"token comment\">// areas to minimize fragmentation while eliminating locks in the common case.</span></code></pre></div>\n<h3 id=\"삼색-표시-후-쓸어담기-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%82%BC%EC%83%89-%ED%91%9C%EC%8B%9C-%ED%9B%84-%EC%93%B8%EC%96%B4%EB%8B%B4%EA%B8%B0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"삼색 표시 후 쓸어담기 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삼색 표시 후 쓸어담기 알고리즘</h3>\n<p>Go언어의 GC는 <strong>삼색 표시 후 쓸어담기 알고리즘</strong>를 사용합니다.<br>\n먼저 <strong>삼색 집합</strong>에 대해서 알아봐야겠죠?</p>\n<ul>\n<li>흰색 집합(White set): 프로그램에서 더 이상 접근할 수 없어서 GC 대상이 되는 객체</li>\n<li>검은색 집합(Black set): 프로그램이 사용하고 있고, 흰색 집합의 객체에 대한 참고가 없는 객체. 흰색 집합의 객체가 검은색 집합의 객체의 참조를 가져도 문제가 되지 않음.</li>\n<li>회색 집합(Grey set): 프로그램이 사용하고 있고, 흰색 집합의 객체를 가리킬 수도 있어서 검사를 진행해야하는 객체</li>\n</ul>\n<p>삼색 표시 후 쓸어담기 알고리즘은 아래와 같은 과정으로 진행됩니다.</p>\n<ol>\n<li>가비지 컬렉션은 모든 객체를 흰색으로 칠한 상태에서 시작합니다.</li>\n<li>GC가 모든 루트 객체(Root Object)를 방문해서 회색으로 칠합니다. 여기서 루트 객체란, 스택이나 전역 변수처럼 애플리케이션에서 직접 접근할 수 있는 오브젝트를 이야기합니다.</li>\n<li>GC는 회색 집합의 객체를 하나씩 검은색으로 변경하면서 그 객체가 가리키는 희색 집합 객체가 확인되면 해당 객체를 회색으로 칠합니다.</li>\n<li>3번의 작업을 회색 집합에 객체가 없어질 때까지 반복합니다. 이 작업이 끝나면 더 이상 접근할 수 없는 객체만 희색 집합에 남게 됩니다.</li>\n<li>흰색 집합의 객체에 할당된 메모리 공간을 회수하여 메모리를 확보합니다.</li>\n</ol>\n<p><img src=\"https://velog.velcdn.com/images%2Fkineo2k%2Fpost%2F9e9edd37-9349-4557-a545-06b0969e1174%2Ftricolor-mark-and-sweep.png\" alt=\"\"></p>\n<p>GC 수행 중 **뮤테이터 스레드(Mutator threads)**가 힙에 객체 참조를 변경한다면 어떻게 될까요?<br>\n뮤테이터 스레드(Mutator threads)란 GC를 수행하는 스레드를 제외한 우리가 작성한 애플리케이션의 스테드를 의미합니다.<br>\n이 경우 <strong>GC를 수행하는 객체의 정합성을 보장할 수 없어서 문제가 발생</strong>할 수 있습니다. 그래서 GC는 안전하고 정확한 GC 수행을 위해서 뮤테이터 스레드를 중지 시킵니다. 뮤테이터 스레드를 중지한 상태를 Stop the world(STW)라고 부르며, 가비지 컬렉션 안전점(Garbage collection safe−point)이 만들어집니다.<br>\n또한, 이것이 <strong>애플리케이션 성능 저하의 주요 원인</strong>이 됩니다.</p>\n<p>Go언어의 GC는 채널(Channel) 변수에 대해서도 동일하게 메모리 회수 작업을 수행합니다. 더 이상 접근할 수 없는 채널이라면 해당 채널이 열려 있는 상태더라도 메모리에서 해제됩니다. 또한 Java 등 다른 언어처럼 Go언어에서도 직접 GC를 실행할 수 있도록 <code class=\"language-text\">runtime.GC()</code> 함수를 제공합니다.<br>\n하지만 GC 호출에는 대가가 따르는 만큼 <code class=\"language-text\">runtime.GC()</code> 호출에는 GC에 대한 깊은 이해와 주의가 필요합니다.</p>\n<h2 id=\"참고한-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EC%9E%90%EB%A3%8C\" aria-label=\"참고한 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 자료</h2>\n<ul>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/go-gc/\">Go 언어의 GC에 대해</a></li>\n<li><a href=\"https://medium.com/a-journey-with-go/go-how-does-the-garbage-collector-watch-your-application-dbef99be2c35\">Go: How Does the Garbage Collector Watch Your Application?</a></li>\n<li><a href=\"https://velog.io/@kineo2k/Go-%EC%96%B8%EC%96%B4%EC%9D%98-GC\">Go 언어의 GC</a></li>\n<li><a href=\"https://www.developer.com/languages/tricolor-algorithm-golang/\">Tricolor Algorithms in Go</a></li>\n</ul>","frontmatter":{"date":"November 24, 2022","title":"Go언어와 메모리","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/golang-and-memory/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"dev-hyunsang/dev-hyunsang.github.io"}}}}},"pageContext":{"slug":"/golang-beginner/","nextSlug":"/golang-and-memory/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}