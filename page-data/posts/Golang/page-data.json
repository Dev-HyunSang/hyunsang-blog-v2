{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Golang","result":{"pageContext":{"currentCategory":"Golang","categories":["All","나의","다양한","생각들","중","Golang","회고","Rust","Programing"],"edges":[{"node":{"id":"b5a44ab9-374d-5435-aa1f-287bfcb95437","excerpt":"안녕하세요. 오늘은 Go언어와 함께 JWT(JSON Web Token)을 사용하는 방법과 함께 JWT의 취약점을 Redis를 통해서 안전하게 사용할 수 있는 방법에 대해서 이야기 해 보고자 합니다. JWT(JSON Web Token)이란? JWT(JSON Web Token)는 유저를 인증하고 식별하기 위한 토큰 기반의 인증입니다. RFC 7519에 자세한 명세가 나왔습니다. 토큰은 세션과 달리 서버가 아닌 클라이언트에 저장이 되기에, 메모리나 스토리지 등을 통해서 세션을 관리했던 서버의 부담을 덜 수 있습니다. 세션의 이러한 단점을 JWT를 통해서 보완할 수 있지만 JWT는 토큰 자체에 사용자의 권한 정보나 서비스를 사용하기 위한 정보가 포함(Self-contained)된다는 것이다. 데이터가 많아지면 토큰이 커질 수 있으며 토큰이 한 번 발급된 이후 사용자의 정보를 바꾸더라도 토큰을 재발급하지 않는 이상 반영되지 않습니다. 일반적으로 JWT를 사용하면 아래와 같은 순서로 진행됩니…","fields":{"slug":"/jwt-and-redis-with-golang/"},"frontmatter":{"categories":"Golang","title":"Go언어와 JWT(JSON Web Token)을 함께 사용하면서\n Redis를 통해서 더 안전하게 사용하기!","date":"February 15, 2023"}},"next":{"fields":{"slug":"/2022-retrospective/"}},"previous":{"fields":{"slug":"/My-thoughts-on-the-way-forward/"}}},{"node":{"id":"5c0fb49b-8453-5d63-9f30-2200c3310366","excerpt":"안녕하세요. 박현상입니다. 요즘 새로운 프로젝트를 하며 다양한 기술들을 다시 공부하고 있습니다. 다른 서비스를 보며, 클론 코딩을 하면서 기술, 기능들에 대해서 다시 공부하고 있습니다. 오류 상황 위 코드처럼 개발되어 있었으며, 유저 구조체()를 통해서 요청을 받으며, 그 구조체를 다시 이용하여 데이터베이스에 Insert(삽입)하고 있습니다. 라는 오류가 발생하게 되며, 위와 같이 암호화는 제대로 되지만 복호화가 되지 않는 오류가 발생하게 되었습니다. 또한 동일한 값으로 암호화하여 데이터베이스와 코드 상에서 암호화하여 표출하는 경우 암호화된 값이 다르다는 점을 알게 되었습니다. 또한 로그인과 회원가입 시 요청을 받는 구조체가 다르다는 점을 알게 되었습니다. 이로 인해서 구조체 관련 오류 사항인지 확인했습니다. 확인 후 구조체 때문에 오류가 발생한다는 사실을 알게 되었습니다. 해결 방법 구조체를 사용할 때 필요한 요청만 담고 있는 구조체를 사용해야 한다는 사실을 알게 되었습니다. 안…","fields":{"slug":"/golang-password-validation-error/"},"frontmatter":{"categories":"Golang","title":"crypto/bcrypt: hashedPassword is not the hash of the given password 관련 오류 해결 방법","date":"December 11, 2022"}},"next":{"fields":{"slug":"/rust-error-solution/"}},"previous":{"fields":{"slug":"/2022-retrospective/"}}},{"node":{"id":"27b87515-86de-51a8-8ab8-5cd49aecd979","excerpt":"Go언어를 처음으로 입문하시는 분들을 위해서 다양한 자료들을 글로써 정리해보고자 합니다! 들어가기 앞써서 일단 저는 다양한 자료를 접하고 기본적인 문법을 공부하고 나서는 제 스스로 만들어보고 싶은 것들을 만들어 보고자 노력합니다. 만약 코딩에 대해서 자신이 흥미가 없는데 억지로 공부하는 것은 올바르지 않는 방법이 될 수도 있습니다. 자신이 코딩에 관심과 흥미를 가지면 조금 더 빠르게 자신이 원하는 프로그래밍 언어를 공부할 수 있다고 생각합니다. 문법 온라인 문서 golang.org - Getting started 예제로 배우는 Go 프로그래밍 가장 빨리 만나는 Go 언어 영상 Tucker의 Go 언어 프로그래밍 Learn Go Programming - Golang Tutorial for Beginners Back-End · Server Framework 프레임워크를 선택함에 있어서 Do you guys use frameworks with Go for backend developme…","fields":{"slug":"/golang-beginner/"},"frontmatter":{"categories":"Golang","title":"Go언어 입문자들을 위한 자료","date":"November 24, 2022"}},"next":{"fields":{"slug":"/golang-and-memory/"}},"previous":{"fields":{"slug":"/consideration-of-code-structure/"}}},{"node":{"id":"a8379057-9a99-5b06-81df-e520481e39b0","excerpt":"요즘 회사에서 새로운 프로젝트를 Rust으로 진행한다고 해서 Rust를 공부하던 도중 제가 예전에도 지금에도 어려워하고 있는 메모리를 조금 더 깊게 공부하고 싶다는 생각이 들어서 제가 메인으로 사용하는 Go언어에서 메모리는 어떻게 사용될지 정리해 보고자 이렇게 글을 작성합니다. 본 글은 GC(Garbage Collection)에 대해서 중점적으로 서술합니다. Go 언어의 GC를 참고하여 작성하였습니다. 쓰레기 버리는 Gopher 가비지 컬렉션이란 본격적으로 들어가기 전에 가비지 컬렉션(GC, Garbage Collection)를 알아보고자 합니다. 가비지는 유효하지 않는 메모리 주소, 해제되지 않은 영역를 의미합니다. 프로그래밍 언어에서는 통상 ‘Danling Ojbect’으로 불리고 있으며, Java나 Go에서는 Garbage라는 용어를 사용하고 있습니다. 옛날 언어들은 BASIC처럼 동적인 메모리 할당 기능이 없어서 FORTRAN, C언어처럼 프로그래머가 할당한 뒤 수동으로 해…","fields":{"slug":"/golang-and-memory/"},"frontmatter":{"categories":"Golang","title":"Go언어와 메모리","date":"November 24, 2022"}},"next":{"fields":{"slug":"/1-year-of-startup-experience/"}},"previous":{"fields":{"slug":"/golang-beginner/"}}},{"node":{"id":"55798783-a7c8-50d0-85d1-31f2243c76a3","excerpt":"안녕하세요. Go언어를 사용하면서 궁금증 생겨서 궁금증을 해결하고자 작성하게 되었습니다. 와 는 무엇을 뜻하고 ㄴ무엇을 하는지에 대해서 궁금증이 생겨서 찾아 보았습니다. 또한 포인터에 대해서 궁금증이 생겨서 찾아보고 공부한 내용들을 작성해 보았습니다. 참고한 글로써는 아래와 같습니다. Stack Overflow - What is the meaning of ’*’ and ’&‘? Stack Overflow - What does the ’*’ and ’&’ symbol in Go mean? golang.org - Pointers 일단 Pointer는 무엇인가? 포인터(Pointer)는 프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간 주소를 가리키는 변수를 말합니다. 포인터가 가리키는 값을 가져오는 것을 역참조라고 합니다. 포인터는 어셈블리어와 C, C++, 파스칼 등에서 하위 레벨까지 제어할 수 있는 언어에서 주로 쓰이고 있습니다. 일반적으로 포인터는 메모리 주소로 바꿀 …","fields":{"slug":"/&-*-Operator/"},"frontmatter":{"categories":"Golang","title":"Go언어에서 &와 *는 무엇을 뜻할까?","date":"January 01, 2022"}},"next":{"fields":{"slug":"/Leave-an-efficient-log/"}},"previous":{"fields":{"slug":"/1-year-of-startup-experience/"}}},{"node":{"id":"54b48c4a-25c3-5b9c-a8f7-99b40d2caa81","excerpt":"안녕하세요. 요즘 회사에서 미디어 스토리지를 개발 하면서 드는 생각이 있습니다. 실제로 돌아가고 있는 서비스나 시스템에서는 로그를 어떻게 관리하며, 로그의 중요성을 파악하고 있습니다. 로그 시스템이 추후에 데이터 자산이 될 수도 있다는 생각과 더불어 추후에 개발을 하면서 어떻게 동작하고 어떤 오류가 있는지 명확하게 파악할 수 있다는 생각이 들어서 효율적으로 Go언어를 통해서 로그를 어떻게 남기면 좋을지에 대해서 이야기 해 보고자 합니다. 다소 부족하지만 읽어주시면 감사하겠습니다! Go언어에서 사용할 수 있는 Logger는? Go언어에서 기본적으로 제공해 주는 Logger인 가 있습니다. 기존적으로 제공되는 패키지는 몇 가지의 단점이 있어서 그러한 부족한 점들을 채우기 위해서 외부 Logger를 사용하시는 것을 추천드립니다. 찾아보고 많이 알아보니 다양한 Logger들이 있는데 개인 취향이나 서비스(시스템)에 더 좋은 패키지를 사용한 것 같아서 정리해 봅니다.    JSON 형식으로…","fields":{"slug":"/Leave-an-efficient-log/"},"frontmatter":{"categories":"Golang","title":"Go언어에서 효율적인 로그 남기기","date":"December 17, 2021"}},"next":{"fields":{"slug":"/return-my-2021/"}},"previous":{"fields":{"slug":"/&-*-Operator/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}