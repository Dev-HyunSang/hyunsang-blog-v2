{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"b5a44ab9-374d-5435-aa1f-287bfcb95437","excerpt":"안녕하세요. 오늘은 Go언어와 함께 JWT(JSON Web Token)을 사용하는 방법과 함께 JWT의 취약점을 Redis를 통해서 안전하게 사용할 수 있는 방법에 대해서 이야기 해 보고자 합니다. JWT(JSON Web Token)이란? JWT(JSON Web Token)는 유저를 인증하고 식별하기 위한 토큰 기반의 인증입니다. RFC 7519에 자세한 명세가 나왔습니다. 토큰은 세션과 달리 서버가 아닌 클라이언트에 저장이 되기에, 메모리나 스토리지 등을 통해서 세션을 관리했던 서버의 부담을 덜 수 있습니다. 세션의 이러한 단점을 JWT를 통해서 보완할 수 있지만 JWT는 토큰 자체에 사용자의 권한 정보나 서비스를 사용하기 위한 정보가 포함(Self-contained)된다는 것이다. 데이터가 많아지면 토큰이 커질 수 있으며 토큰이 한 번 발급된 이후 사용자의 정보를 바꾸더라도 토큰을 재발급하지 않는 이상 반영되지 않습니다. 일반적으로 JWT를 사용하면 아래와 같은 순서로 진행됩니…","fields":{"slug":"/jwt-and-redis-with-golang/"},"frontmatter":{"categories":"Golang","title":"Go언어와 JWT(JSON Web Token)을 함께 사용하면서 Redis를 통해서 더 안전하게 사용하기!","date":"February 15, 2023"}},"next":{"fields":{"slug":"/2022-retrospective/"}},"previous":null},{"node":{"id":"ee82445c-299a-5735-bf97-c2952eb04b87","excerpt":"안녕하세요. 박현상입니다. 2022년 연말인 요즘, 저를 돌아보고 반성하고 발전하고 싶은 점들이 있는지 돌아보기 위해 회고를 작성합니다. 부족한 부분을 찾고 2023년 더 발전된 모습을 만들기 위해 노력합니다. 시작하기 전에 저는 목표를 세우지 않고 살아가는 사람입니다. 인생에 있어서 목표가 없는 이유는 ‘목표’라는 가치 속에 제 인생을 규정하고 싶지 않아서 목표 없이 제가 할 수 있는 최대한의 노력을 하며 살아가고 있습니다. 2012년 초등학교 2학년에 우연히 ‘유령’이라는 드라마를 보며 컴퓨터에 대해 흥미를 느끼게 되었으며, 초등학교 5학년 때 C언어을 책으로 접하기 시작하면서  정보보안과 프로그래밍의 흥미를 느끼게 되었습니다. 중학교 1학년 때부터 목포대학교 정보보호영재교육원을 통해서 제가 흥미를 더 느낄 수 있었고 경험을 통해서 부족한 부분을 알 수 있었고 열심히 노력하여 채울 수 있었습니다. 10대 마지막인 올해를 돌아보며, 어떨 땐 못난 짓을 해서 부모님의 마음을 아프게…","fields":{"slug":"/2022-retrospective/"},"frontmatter":{"categories":"회고","title":"2022년 회고","date":"December 21, 2022"}},"next":{"fields":{"slug":"/golang-password-validation-error/"}},"previous":{"fields":{"slug":"/jwt-and-redis-with-golang/"}}},{"node":{"id":"5c0fb49b-8453-5d63-9f30-2200c3310366","excerpt":"안녕하세요. 박현상입니다. 요즘 새로운 프로젝트를 하며 다양한 기술들을 다시 공부하고 있습니다. 다른 서비스를 보며, 클론 코딩을 하면서 기술, 기능들에 대해서 다시 공부하고 있습니다. 오류 상황 위 코드처럼 개발되어 있었으며, 유저 구조체()를 통해서 요청을 받으며, 그 구조체를 다시 이용하여 데이터베이스에 Insert(삽입)하고 있습니다. 라는 오류가 발생하게 되며, 위와 같이 암호화는 제대로 되지만 복호화가 되지 않는 오류가 발생하게 되었습니다. 또한 동일한 값으로 암호화하여 데이터베이스와 코드 상에서 암호화하여 표출하는 경우 암호화된 값이 다르다는 점을 알게 되었습니다. 또한 로그인과 회원가입 시 요청을 받는 구조체가 다르다는 점을 알게 되었습니다. 이로 인해서 구조체 관련 오류 사항인지 확인했습니다. 확인 후 구조체 때문에 오류가 발생한다는 사실을 알게 되었습니다. 해결 방법 구조체를 사용할 때 필요한 요청만 담고 있는 구조체를 사용해야 한다는 사실을 알게 되었습니다. 안…","fields":{"slug":"/golang-password-validation-error/"},"frontmatter":{"categories":"Golang","title":"crypto/bcrypt: hashedPassword is not the hash of the given password 관련 오류 해결 방법","date":"December 11, 2022"}},"next":{"fields":{"slug":"/rust-error-solution/"}},"previous":{"fields":{"slug":"/2022-retrospective/"}}},{"node":{"id":"721c4b97-926e-519d-af03-6b1893094904","excerpt":"본 게시물에서는 제가 Rust를 공부하면서 다양한 오류를 기록하고 오류 해결 방법에 대해서 기록합니다.  해결 방법1 cc라는 오류 메시지가 표출 되는 것을 보게 되었습니다.  관련 오류로 인해서 를 삭제 후 다시 설치하였습니다. 하지만 해결되지 않았습니다. 해결 되지 않아서 커뮤니티에 도움을 요청 했습니다. error-linking-with-cc-failed-exit-code-1 Mac CommandLineTools 설치와 오류 해결 방법 – xcode-select: error: command line tools are already installed, use “Software Update” to install updates 해결 방법2 제가 코드를 만들면서 큰 실수 하나를 했습니다. postgres를 설치하지 않고 관련 패키지를 설치하려고 했습니다. 제가 자주 보고 도움을 받는 코딩맛집 커뮤니티에 제 상황을 올리게 되었습니다.  는 postgres 라이브러리 중 하나라는 사실를…","fields":{"slug":"/rust-error-solution/"},"frontmatter":{"categories":"Rust","title":"Rust 오류 해결법","date":"December 07, 2022"}},"next":{"fields":{"slug":"/consideration-of-code-structure/"}},"previous":{"fields":{"slug":"/golang-password-validation-error/"}}},{"node":{"id":"693d4dac-5a7f-52b3-97c5-703e57b6b91d","excerpt":"제가 예전부터 프로그래밍을 하면서 궁금했던 점이 있습니다. “과연 올바른 Code Structure(코드 구조화)는 무엇인가”는 무엇인가에 대해서 궁금증과 의문점이 드는 부분이 있어서 작성하게 되었습니다. 내가 생각하는 구조화는 저는 프로그래밍을 하면서 반복적인 코드 또는 다른 기능에서도 사용되는 코드(Ex. A,B를 만들면서 A를 먼저 만들며, A와 B를 함께 사용되는 코드가 있다면) 패키지를 만들어서 개발을 진행하고 있습니다. 하지만 여기서! 이것저것 패키지가 엮여있다면 코드 구조화가 되는 것이 아니라 코드르 더 복잡하게 만든다라고 생각합니다. 예전에 프로그래밍을 할 때에는 하나의 코드 파일에 다양한 함수를 만들어서 이것저것 만들어 보곤 했습니다. 프로그래밍을 하면서 항상 궁금했는데 과연 코드 구조가 복잡해지면 어떻게 해야할지, 그리고 복잡해지지 않기 위해서 어떻게 해야할지에 대해서 중점적으로 이야기 해 보고자 합니다. 잠깐만 코드를 구조화 시키기 전에 제가 코드를 구조화 시키…","fields":{"slug":"/consideration-of-code-structure/"},"frontmatter":{"categories":"Programing","title":"코드 구조화에 대한 고찰","date":"November 26, 2022"}},"next":{"fields":{"slug":"/golang-beginner/"}},"previous":{"fields":{"slug":"/rust-error-solution/"}}},{"node":{"id":"27b87515-86de-51a8-8ab8-5cd49aecd979","excerpt":"Go언어를 처음으로 입문하시는 분들을 위해서 다양한 자료들을 글로써 정리해보고자 합니다! 들어가기 앞써서 일단 저는 다양한 자료를 접하고 기본적인 문법을 공부하고 나서는 제 스스로 만들어보고 싶은 것들을 만들어 보고자 노력합니다. 만약 코딩에 대해서 자신이 흥미가 없는데 억지로 공부하는 것은 올바르지 않는 방법이 될 수도 있습니다. 자신이 코딩에 관심과 흥미를 가지면 조금 더 빠르게 자신이 원하는 프로그래밍 언어를 공부할 수 있다고 생각합니다. 문법 온라인 문서 golang.org - Getting started 예제로 배우는 Go 프로그래밍 가장 빨리 만나는 Go 언어 영상 Tucker의 Go 언어 프로그래밍 Learn Go Programming - Golang Tutorial for Beginners Back-End · Server Framework 프레임워크를 선택함에 있어서 Do you guys use frameworks with Go for backend developme…","fields":{"slug":"/golang-beginner/"},"frontmatter":{"categories":"Golang","title":"Go언어 입문자들을 위한 자료","date":"November 24, 2022"}},"next":{"fields":{"slug":"/golang-and-memory/"}},"previous":{"fields":{"slug":"/consideration-of-code-structure/"}}},{"node":{"id":"a8379057-9a99-5b06-81df-e520481e39b0","excerpt":"요즘 회사에서 새로운 프로젝트를 Rust으로 진행한다고 해서 Rust를 공부하던 도중 제가 예전에도 지금에도 어려워하고 있는 메모리를 조금 더 깊게 공부하고 싶다는 생각이 들어서 제가 메인으로 사용하는 Go언어에서 메모리는 어떻게 사용될지 정리해 보고자 이렇게 글을 작성합니다. 본 글은 GC(Garbage Collection)에 대해서 중점적으로 서술합니다. Go 언어의 GC를 참고하여 작성하였습니다. 쓰레기 버리는 Gopher 가비지 컬렉션이란 본격적으로 들어가기 전에 가비지 컬렉션(GC, Garbage Collection)를 알아보고자 합니다. 가비지는 유효하지 않는 메모리 주소, 해제되지 않은 영역를 의미합니다. 프로그래밍 언어에서는 통상 ‘Danling Ojbect’으로 불리고 있으며, Java나 Go에서는 Garbage라는 용어를 사용하고 있습니다. 옛날 언어들은 BASIC처럼 동적인 메모리 할당 기능이 없어서 FORTRAN, C언어처럼 프로그래머가 할당한 뒤 수동으로 해…","fields":{"slug":"/golang-and-memory/"},"frontmatter":{"categories":"Golang","title":"Go언어와 메모리","date":"November 24, 2022"}},"next":{"fields":{"slug":"/1-year-of-startup-experience/"}},"previous":{"fields":{"slug":"/golang-beginner/"}}},{"node":{"id":"222157b6-9f88-51ff-8607-4f8d64e3d1a0","excerpt":"안녕하세요. 1년 동안 제가 스타트업에서 경험한 이야기들을 적어볼려고 합니다. 작년(2021년) 08월 09일에 팀그릿 합류하게 되었습니다. 백엔드 개발자로써 일하고 있으며, 솔류션과 관련된 개발들을 하고 있습니다. 현재는 미디어 스토리지를 개발하여서 운영하고 있으며, 사내에서 개발하고 있는 다른 서비스(시스템)과 연동하기 위해서 다양한 것들을 손 보고 있습니다. 첫 스타트업 경험 중에서 기억나는 것들 어떻게 합류는 했는지 많은 분들께서 저 보곤 “어떻게 지금 회사를 들어가게 되었냐?”라고 물어보십니다. 저는 평소에 커뮤니케이션 그리고 커뮤니티 활동을 좋아해서 페이스북을 통해서 커뮤니티 활동을 하곤 합니다. 우연히 강성일 대표님을 페이스북 상에서 알게 되었고 대표님께서 먼저 제가 연락을 해 오셨습니다. 이후 많은 이야기를 하게 되었고 Slack 초대 되어 동향을 살피고 대표님께서 다양한 이야기를 전해 주셨습니다. 이런 다양한 이야기를 듣고 “나도 일원이 되어 보고 싶다.”라고 생각…","fields":{"slug":"/1-year-of-startup-experience/"},"frontmatter":{"categories":"회고","title":"1년 동안 스타트업에서 경험","date":"August 10, 2022"}},"next":{"fields":{"slug":"/&-*-Operator/"}},"previous":{"fields":{"slug":"/golang-and-memory/"}}},{"node":{"id":"55798783-a7c8-50d0-85d1-31f2243c76a3","excerpt":"안녕하세요. Go언어를 사용하면서 궁금증 생겨서 궁금증을 해결하고자 작성하게 되었습니다. 와 는 무엇을 뜻하고 ㄴ무엇을 하는지에 대해서 궁금증이 생겨서 찾아 보았습니다. 또한 포인터에 대해서 궁금증이 생겨서 찾아보고 공부한 내용들을 작성해 보았습니다. 참고한 글로써는 아래와 같습니다. Stack Overflow - What is the meaning of ’*’ and ’&‘? Stack Overflow - What does the ’*’ and ’&’ symbol in Go mean? golang.org - Pointers 일단 Pointer는 무엇인가? 포인터(Pointer)는 프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간 주소를 가리키는 변수를 말합니다. 포인터가 가리키는 값을 가져오는 것을 역참조라고 합니다. 포인터는 어셈블리어와 C, C++, 파스칼 등에서 하위 레벨까지 제어할 수 있는 언어에서 주로 쓰이고 있습니다. 일반적으로 포인터는 메모리 주소로 바꿀 …","fields":{"slug":"/&-*-Operator/"},"frontmatter":{"categories":"Golang","title":"Go언어에서 &와 *는 무엇을 뜻할까?","date":"January 01, 2022"}},"next":{"fields":{"slug":"/Leave-an-efficient-log/"}},"previous":{"fields":{"slug":"/1-year-of-startup-experience/"}}},{"node":{"id":"54b48c4a-25c3-5b9c-a8f7-99b40d2caa81","excerpt":"안녕하세요. 요즘 회사에서 미디어 스토리지를 개발 하면서 드는 생각이 있습니다. 실제로 돌아가고 있는 서비스나 시스템에서는 로그를 어떻게 관리하며, 로그의 중요성을 파악하고 있습니다. 로그 시스템이 추후에 데이터 자산이 될 수도 있다는 생각과 더불어 추후에 개발을 하면서 어떻게 동작하고 어떤 오류가 있는지 명확하게 파악할 수 있다는 생각이 들어서 효율적으로 Go언어를 통해서 로그를 어떻게 남기면 좋을지에 대해서 이야기 해 보고자 합니다. 다소 부족하지만 읽어주시면 감사하겠습니다! Go언어에서 사용할 수 있는 Logger는? Go언어에서 기본적으로 제공해 주는 Logger인 가 있습니다. 기존적으로 제공되는 패키지는 몇 가지의 단점이 있어서 그러한 부족한 점들을 채우기 위해서 외부 Logger를 사용하시는 것을 추천드립니다. 찾아보고 많이 알아보니 다양한 Logger들이 있는데 개인 취향이나 서비스(시스템)에 더 좋은 패키지를 사용한 것 같아서 정리해 봅니다.    JSON 형식으로…","fields":{"slug":"/Leave-an-efficient-log/"},"frontmatter":{"categories":"Golang","title":"Go언어에서 효율적인 로그 남기기","date":"December 17, 2021"}},"next":{"fields":{"slug":"/return-my-2021/"}},"previous":{"fields":{"slug":"/&-*-Operator/"}}},{"node":{"id":"e2c4431f-541d-5ade-b923-504c2bef882e","excerpt":"올해(2021년)는 다양한 일들이 이었으며, 다양한 일들과 더불어 저의 생각들을 기록해 보고 2021년을 마무리 지어보려고 합니다. 저는 아직도 많은 부족한 사람이지만 조금씩 부족한 부분을 채워 나가려고 합니다. 올해 부족한 부분을 채운 것을 기록하고 고찰하고 회고하고자 합니다. 개인적인 생각과 제가 2021년에 해던 행동, 일들에 대해서 이야기를 작성하였습니다. 인류와 공존하는 바이러스, 코로나19 2021년 회고를 쓰면서 2020년 이야기가 잠깐 나올 것 같습니다ㅎㅎ 2020년 초, 중국에서 코로나19와 관련되어서 뉴스 기사가 많이 뜨고 있었습니다. 저는 관심이 없었고 한참 기사가 뜨고 있을 때 부산에서 1박 2일 일정으로 행사가 있어서 부산에 있었습니다. 부산을 방문한 후 겨울 감기 + 인후염(?)으로 인해서 몸 상태가 안 좋았고 발열을 동반하고 있어서 병원에 가서 약을 받았고 의사 선생님의 처방 중 마스크를 쓰고 다니라는 말을 듣고 마스크를 덴탈 마스크 2봉지를 사게. 됩니…","fields":{"slug":"/return-my-2021/"},"frontmatter":{"categories":"회고","title":"2021년 회고","date":"December 11, 2021"}},"next":null,"previous":{"fields":{"slug":"/Leave-an-efficient-log/"}}}],"categories":["All","Golang","회고","Rust","Programing"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}