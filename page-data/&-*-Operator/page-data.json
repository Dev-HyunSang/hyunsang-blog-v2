{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/&-*-Operator/",
    "result": {"data":{"cur":{"id":"6f4e1a54-1ee5-5fda-9cd5-461e0f86b9de","html":"<p>안녕하세요. Go언어를 사용하면서 궁금증 생겨서 궁금증을 해결하고자 작성하게 되었습니다.<br>\n<code class=\"language-text\">&amp;</code>와 <code class=\"language-text\">*</code>는 무엇을 뜻하고 ㄴ무엇을 하는지에 대해서 궁금증이 생겨서 찾아 보았습니다.<br>\n또한 포인터에 대해서 궁금증이 생겨서 찾아보고 공부한 내용들을 작성해 보았습니다.</p>\n<p><strong>참고한 글로써는 아래와 같습니다.</strong></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38172661/what-is-the-meaning-of-and\">Stack Overflow - What is the meaning of ’*’ and ’&#x26;‘?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49572378/what-does-the-and-symbol-in-go-mean\">Stack Overflow - What does the ’*’ and ’&#x26;’ symbol in Go mean?</a></li>\n<li><a href=\"https://go.dev/tour/moretypes/1\">golang.org - Pointers</a></li>\n</ul>\n<h2 id=\"일단-pointer는-무엇인가\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%8B%A8-pointer%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"일단 pointer는 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일단 Pointer는 무엇인가?</h2>\n<p>포인터(Pointer)는 프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간 주소를 가리키는 변수를 말합니다.<br>\n포인터가 가리키는 값을 가져오는 것을 역참조라고 합니다.<br>\n포인터는 어셈블리어와 C, C++, 파스칼 등에서 하위 레벨까지 제어할 수 있는 언어에서 주로 쓰이고 있습니다.<br>\n일반적으로 포인터는 메모리 주소로 바꿀 수 있습니다. 포인터는 다른 변수나 함수를 가리키도록 사용합니다.</p>\n<h3 id=\"주소값의-이해\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%86%8C%EA%B0%92%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\"주소값의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주소값의 이해</h3>\n<p>데이터의 주소값이란 해당 데이터가 저장된 메모리의 시작 주소를 의미합니다.<br>\nC언어에서는 이러한 주소값을 1바티으 크기의 메모리 공간으로 나누어 표현합니다.<br>\n예를 들어, int형 데이터는 4바이트의 크기를 가지지만, int형 데이터의 주소값은 시작 주소 1바이트만을 가리킵니다.</p>\n<h2 id=\"go언어에서의-포인터\" style=\"position:relative;\"><a href=\"#go%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"go언어에서의 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go언어에서의 포인터</h2>\n<p>Go언어는 프로그램 내에서 값의 참조와 레코드를 전달할 수 있는 <a href=\"https://ko.wikipedia.org/wiki/%ED%8F%AC%EC%9D%B8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">Pointers</a>를 지원합니다. 예제 보면서 함께 알아 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">zeroval</span><span class=\"token punctuation\">(</span>ival <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tival <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">zeroptr</span><span class=\"token punctuation\">(</span>iptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>iptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initial:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">zeroval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeroval:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">zeroptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeroptr:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointer:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div align=\"center\">\n<p style=\"font-size: 14px; color: gray;\"><a herf=\"https://mingrammer.com/gobyexample/pointers/\">Go by Example: 포인터</a> 예제와 설명을 참고하였습니다.</p>\n</div>\n<p>두 함수 zeroval와 zeroptr를 가지고 포인터가 값과 다르게 어떻게 동작하는지 살펴 보겠습니다. zeroval은 int 타입 파라미터를 가지므로 인자는 값으로 전달됩니다. zeroval는 함수를 호출할 때의 값을 ival에 복사하여서 가져오게 됩니다.</p>\n<p>그에 반해서 zeroptr는 <code class=\"language-text\">int</code>형 포인터를 받을 수 있또록 <code class=\"language-text\">*int</code>타입을 파라미터로 갖고 있습니다.<br>\n함수 안에서 <code class=\"language-text\">*iptr</code>는 메모리 주소에서 해당 주소의 현재값으로 포인터를 역참조(dereference) 합니다. 역참조된 포인터에 값을 할당하면 이는 참조된 주소의 값을 바꾸게 됩니다.</p>\n<p>&#x26;i는 i의 메모리 주소를 반환합니다. 즉 i의 포인터입니다.<br>\n포인터도 <code class=\"language-text\">fmt</code> 패키지를 통해서 출력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run pointers.go\ninitial: <span class=\"token number\">1</span>\nzeroval: <span class=\"token number\">1</span>\nzeroptr: <span class=\"token number\">0</span>\npointer: 0x42131100</code></pre></div>\n<p>zeroval은 <code class=\"language-text\">main</code>에 있는 i값을 바꾸지 않지만, <code class=\"language-text\">zeroptr</code>은 해당 값의 메모리 주소를 참조하고 있기 때문에 값을 바꿀 수 있습니다.</p>\n<h2 id=\"참고한-문서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EB%AC%B8%EC%84%9C\" aria-label=\"참고한 문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 문서</h2>\n<ul>\n<li><a href=\"https://mingrammer.com/gobyexample/pointers/\">Go by Example: 포인터</a></li>\n<li><a href=\"https://stackoverflow.com/questions/38172661/what-is-the-meaning-of-and\">Stack Overflow - What is the meaning of ’*’ and ’&#x26;‘?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49572378/what-does-the-and-symbol-in-go-mean\">Stack Overflow - What does the ’*’ and ’&#x26;’ symbol in Go mean?</a></li>\n<li><a href=\"https://go.dev/tour/moretypes/1\">golang.org - Pointers</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%8F%AC%EC%9D%B8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">위키백과 - 포인터 (프로그래밍)</a></li>\n<li><a href=\"http://www.tcpschool.com/c/c_pointer_intro\">TCPShool.com - 포인터의 개념</a></li>\n</ul>","excerpt":"안녕하세요. Go언어를 사용하면서 궁금증 생겨서 궁금증을 해결하고자 작성하게 되었습니다. 와 는 무엇을 뜻하고 ㄴ무엇을 하는지에 대해서 궁금증이 생겨서 찾아 보았습니다. 또한 포인터에 대해서 궁금증이 생겨서 찾아보고 공부한 내용들을 작성해 보았습니다. 참고한 글로써는 아래와 같습니다. Stack Overflow - What is the meaning of ’*’ and ’&‘? Stack Overflow - What does the ’*’ and ’&’ symbol in Go mean? golang.org - Pointers 일단 Pointer는 무엇인가? 포인터(Pointer)는 프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간 주소를 가리키는 변수를 말합니다. 포인터가 가리키는 값을 가져오는 것을 역참조라고 합니다. 포인터는 어셈블리어와 C, C++, 파스칼 등에서 하위 레벨까지 제어할 수 있는 언어에서 주로 쓰이고 있습니다. 일반적으로 포인터는 메모리 주소로 바꿀 …","frontmatter":{"date":"January 01, 2022","title":"Go언어에서 &와 *는 무엇을 뜻할까?","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/&-*-Operator/"}},"next":{"id":"5e4f528a-5e79-571d-85a1-fc131cb89e51","html":"<p>안녕하세요. 요즘 회사에서 미디어 스토리지를 개발 하면서 드는 생각이 있습니다.<br>\n실제로 돌아가고 있는 서비스나 시스템에서는 로그를 어떻게 관리하며, 로그의 중요성을 파악하고 있습니다.<br>\n로그 시스템이 추후에 데이터 자산이 될 수도 있다는 생각과 더불어 추후에 개발을 하면서 어떻게 동작하고 어떤 오류가 있는지 명확하게 파악할 수 있다는 생각이 들어서 효율적으로 Go언어를 통해서 로그를 어떻게 남기면 좋을지에 대해서 이야기 해 보고자 합니다. 다소 부족하지만 읽어주시면 감사하겠습니다!</p>\n<h2 id=\"go언어에서-사용할-수-있는-logger는\" style=\"position:relative;\"><a href=\"#go%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-logger%EB%8A%94\" aria-label=\"go언어에서 사용할 수 있는 logger는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go언어에서 사용할 수 있는 Logger는?</h2>\n<p>Go언어에서 기본적으로 제공해 주는 Logger인 <code class=\"language-text\">log</code>가 있습니다. 기존적으로 제공되는 패키지는 몇 가지의 단점이 있어서 그러한 부족한 점들을 채우기 위해서 외부 Logger를 사용하시는 것을 추천드립니다.<br>\n찾아보고 많이 알아보니 다양한 Logger들이 있는데 개인 취향이나 서비스(시스템)에 더 좋은 패키지를 사용한 것 같아서 정리해 봅니다.</p>\n<ul>\n<li><a href=\"https://github.com/golang/glog\"><code class=\"language-text\">golang/gloag</code></a></li>\n<li><a href=\"https://github.com/uber-go/zap\"><code class=\"language-text\">uber-go/zap</code></a></li>\n<li><a href=\"https://github.com/rs/zerolog\"><code class=\"language-text\">rs/zerolog</code></a></li>\n</ul>\n<p>JSON 형식으로 출력되는 패키지도 있으며, 텍스트 형식으로 출력이 가능한 패키지들이 있습니다.<br>\n개발하는 방향에 따라서 사용하시면 될 것 같습니다. <strong>이 글에서는 <a href=\"https://github.com/uber-go/zap\"><code class=\"language-text\">uber-go/zap</code></a>을 사용할 예정입니다.</strong></p>\n<h2 id=\"logger를-사용-개발할-때-고려해야할-상황\" style=\"position:relative;\"><a href=\"#logger%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC%ED%95%A0-%EC%83%81%ED%99%A9\" aria-label=\"logger를 사용 개발할 때 고려해야할 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logger를 사용, 개발할 때 고려해야할 상황</h2>\n<p>개발을 하면서 몇 개의 주의점과 기존 패키지의 단점들, 몇 가지를 알면 좋을 팁들을 전해 드리고자 합니다…!</p>\n<h3 id=\"기존의-문제점-해결하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"기존의 문제점 해결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존의 문제점 해결하기</h3>\n<p>Go언어에서 기본적으로 log 패키지를 지원 하지만 정확한 caller를 확인할 수 없다는 단점이 있습니다.<br>\n기존의 log 패키지를 사용할 경우에는 <code class=\"language-text\">logger/logger:42</code>와 같이 출력되어서 한 계층 위의 Caller 알 수 없다는 단점이 있었습니다.<br>\n그런 단점들을 보완할 수 있는 방법은 기본 패키지를 사용하지 않고 외부 패키지를 사용하여서 logger를 개발하는 방법이 더 좋은 선택일 수 있습니다.</p>\n<h3 id=\"로그-파일의-저정과-용량-문제\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%A0%80%EC%A0%95%EA%B3%BC-%EC%9A%A9%EB%9F%89-%EB%AC%B8%EC%A0%9C\" aria-label=\"로그 파일의 저정과 용량 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그 파일의 저정과 용량 문제</h3>\n<p>로그를 <code class=\"language-text\">.log</code>나 다른 파일들로 저장을 하였을 때 로컬에 저장하는 경우 용량의 범람으로 인해서 서버가 죽거나 클라우드 서비스를 이용하는 경우 클라우드 서비스 비용이 많이 들어갈 수도 있습니다.</p>\n<h3 id=\"가독성의-중요성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%8F%85%EC%84%B1%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"가독성의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가독성의 중요성</h3>\n<p>로그는 본질적으로 서비스의 구동 사항들을 기록하거나 아니면 오류 사항들을 출력할 때. 주로 로그를 사용한다고 이야기 할 수 있습니다.<br>\n그러므로 개발자가 손 쉽게 이해하고 오류를 해결할 수 있도록 해야하는 것 같습니다.<br>\n또한 로그 메시지를 규칙을 세워서 작성하시는 것을 추천합니다.</p>\n<h2 id=\"코드로-만들어-보기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"코드로 만들어 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드로 만들어 보기</h2>\n<p>일단의 저는 경우 logger 패키지를 통해서 개발할 예정입니다.<br>\n기본적인 디렉토리 구조는 이렇습니다. <code class=\"language-text\">go mod tidy</code>를 통해서 <code class=\"language-text\">go.mod</code> 파일을 만들어 주세요.</p>\n<h3 id=\"설치하기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go mod init \n$ go get -u go.uber.org/zap</code></pre></div>\n<p>zap 패키지를 사용할 수 있도록 명령어를 통해서 설치 해 주세요.</p>\n<h3 id=\"logger-패키지-개발하기\" style=\"position:relative;\"><a href=\"#logger-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\" aria-label=\"logger 패키지 개발하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logger 패키지 개발하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tl         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>Logger\n\ts         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>SugaredLogger\n\tDebug     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfo      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarn      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tError     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tDebugf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfof     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarnf     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tErrorf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfoQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n\tWarnQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>개발의 생산성을 고려하여서 기본적으로 zap.SugaredLogger를 사용하여서 Logging 하기로 하였습니다.<br>\n필요한 변수들을 먼저 선언해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ZapSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to Logger Starting...\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매번 4줄의 코드를 치는 것보다 함수를 통해서 설정을 하는 것이 더 좋은 방법이라고 생각이 되어서 함수를 만들었습니다.<br>\n그럼 본격적으로 중요한 Zap에 대해서 개발해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\tdate <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\n\tlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n\n\tconfig <span class=\"token operator\">:=</span> zap<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>\n\t\tLevel<span class=\"token punctuation\">:</span>       zap<span class=\"token punctuation\">.</span><span class=\"token function\">NewAtomicLevelAt</span><span class=\"token punctuation\">(</span>zap<span class=\"token punctuation\">.</span>DebugLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tDevelopment<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tEncoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t\tOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEncoderConfig<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>EncoderConfig<span class=\"token punctuation\">{</span>\n\t\t\tLevelKey<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span>\n\t\t\tTimeKey<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n\t\t\tMessageKey<span class=\"token punctuation\">:</span>   <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n\t\t\tCallerKey<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n\t\t\tEncodeTime<span class=\"token punctuation\">:</span>   zapcore<span class=\"token punctuation\">.</span>ISO8601TimeEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeLevel<span class=\"token punctuation\">:</span>  zapcore<span class=\"token punctuation\">.</span>LowercaseLevelEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeCaller<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>ShortCallerEncoder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tl<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\ts <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">Sugar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tDebug <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debug\n\tInfo <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Info\n\tWarn <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warn\n\tError <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Error\n\tDebugf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debugf\n\tInfof <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Infof\n\tWarnf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warnf\n\tErrorf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Errorf\n\tInfoQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Info\n\tWarnQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Warn\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 개발하였습니다. 추후에 호출할 때 변수할 수 있도록 먼저 선언해 주는 함수에 넣어주었습니다.<br>\n<code class=\"language-text\">zap.Config</code>의 경우 각종 설정을 할 수 있도록 하였습니다.<br>\nEncoding의 경우 console 방식과 json 방식이 있습니다.\nconsole의 경우의 <code class=\"language-text\">2019-05-04T16:31:17.610+0900    INFO    test/zap.go:17  failed to Process       {\"err\": \"null exception\", \"attempt\": 3, \"duration\": \"1s\"}</code> 형식으로 출력 됩니다. JSON의 경우에는 <code class=\"language-text\">{\"level\":\"info\",\"time\":\"2021-12-16T21:05:04.766+0900\",\"path\":\"TeamGRIT-VMS/main.go:59\",\"message\":\"Starting Server...!\",\"time\":\"2021-12-16T21:05:04.766+0900\"}</code> 형식으로 출력됩니다.</p>\n<h3 id=\"log-파일과-콘솔-기록하기\" style=\"position:relative;\"><a href=\"#log-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%BD%98%EC%86%94-%EA%B8%B0%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"log 파일과 콘솔 기록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>log 파일과 콘솔 기록하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">date <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\nlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span></code></pre></div>\n<p>저는 날짜 형식으로 로그 파일의 이름을 만들어서 기록하였습니다. 다른 방식으로 지정하셔도 됩니다.<br>\n경로도 각자의 취향에 맞게 지정하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">Encoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\nOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\tlogFile<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\tlogFile<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>출력하기 위해서 <code class=\"language-text\">OutputPaths</code>와 <code class=\"language-text\">ErrorOutputPaths</code>를 설정해 주어야 합니다.<br>\n터미널에 출력하기 위해서는 <code class=\"language-text\">stdout</code>를 사용해야 합니다. 파일을 통해서 기록하기 위해서는 위에 지정하였던 <code class=\"language-text\">logFile</code>를 사용하여서 파일로 기록할 수 있습니다.<br>\n만약 터미널에만 출력하고 싶다면 <code class=\"language-text\">stdout</code>만 사용하시면 됩니다, 또 로그 파일에 기록만 하고 싶은 경우 <code class=\"language-text\">logFile</code>만 사용하시면 됩니다.\n두 개 다 사용하시고 싶으시면 <code class=\"language-text\">stdout</code>와 <code class=\"language-text\">logFile</code> 같이 사용할 수 있습니다.</p>\n<h2 id=\"최종-코드\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%BD%94%EB%93%9C\" aria-label=\"최종 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최종 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> logger\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\n\t<span class=\"token string\">\"go.uber.org/zap\"</span>\n\t<span class=\"token string\">\"go.uber.org/zap/zapcore\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tl         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>Logger\n\ts         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>SugaredLogger\n\tDebug     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfo      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarn      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tError     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tDebugf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfof     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarnf     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tErrorf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfoQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n\tWarnQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ZapSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to Logger Starting...\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\tdate <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\n\tlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n\n\tconfig <span class=\"token operator\">:=</span> zap<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>\n\t\tLevel<span class=\"token punctuation\">:</span>       zap<span class=\"token punctuation\">.</span><span class=\"token function\">NewAtomicLevelAt</span><span class=\"token punctuation\">(</span>zap<span class=\"token punctuation\">.</span>DebugLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tDevelopment<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tEncoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t\tOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEncoderConfig<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>EncoderConfig<span class=\"token punctuation\">{</span>\n\t\t\tLevelKey<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span>\n\t\t\tTimeKey<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n\t\t\tMessageKey<span class=\"token punctuation\">:</span>   <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n\t\t\tCallerKey<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n\t\t\tEncodeTime<span class=\"token punctuation\">:</span>   zapcore<span class=\"token punctuation\">.</span>ISO8601TimeEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeLevel<span class=\"token punctuation\">:</span>  zapcore<span class=\"token punctuation\">.</span>LowercaseLevelEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeCaller<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>ShortCallerEncoder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tl<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\ts <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">Sugar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tDebug <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debug\n\tInfo <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Info\n\tWarn <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warn\n\tError <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Error\n\tDebugf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debugf\n\tInfof <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Infof\n\tWarnf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warnf\n\tErrorf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Errorf\n\tInfoQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Info\n\tWarnQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Warn\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참고한-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EC%9E%90%EB%A3%8C\" aria-label=\"참고한 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 자료</h2>\n<ul>\n<li><a href=\"https://docs.google.com/document/d/1jYNFSTC7-c21-RFBad3qCmQu0Arm-nxk7F1TS-h4Nds/\">직접 만든 Logger 안에서 zap 라이브러리를 사용할 때 Caller에 Logger 보다 위의 계층을 출력하는 방법</a>\n<ul>\n<li>많은 부분 참고한 문서입니다.</li>\n</ul>\n</li>\n<li><a href=\"https://wookiist.dev/110\">[Go/Golang] Zap과 시간 기반 파일 로테이션 로깅 수행하기</a></li>\n<li><a href=\"https://minwook-shin.github.io/go-structured-leveled-logging-zap/\">Golang structured leveled 로그 zap 라이브러리 알아보기</a></li>\n</ul>","frontmatter":{"date":"December 17, 2021","title":"Go언어에서 효율적인 로그 남기기","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/Leave-an-efficient-log/"}},"prev":{"id":"eb714bec-6795-5a17-b451-6da972f112b4","html":"<p>안녕하세요. 1년 동안 제가 스타트업에서 경험한 이야기들을 적어볼려고 합니다.<br>\n작년(2021년) 08월 09일에 <a href=\"https://www.teamgrit.kr/\">팀그릿</a> 합류하게 되었습니다. 백엔드 개발자로써 일하고 있으며, 솔류션과 관련된 개발들을 하고 있습니다. 현재는 미디어 스토리지를 개발하여서 운영하고 있으며, 사내에서 개발하고 있는 다른 서비스(시스템)과 연동하기 위해서 다양한 것들을 손 보고 있습니다.</p>\n<h2 id=\"첫-스타트업-경험-중에서-기억나는-것들\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EA%B2%BD%ED%97%98-%EC%A4%91%EC%97%90%EC%84%9C-%EA%B8%B0%EC%96%B5%EB%82%98%EB%8A%94-%EA%B2%83%EB%93%A4\" aria-label=\"첫 스타트업 경험 중에서 기억나는 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 스타트업 경험 중에서 기억나는 것들</h2>\n<h3 id=\"어떻게-합류는-했는지\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%A9%EB%A5%98%EB%8A%94-%ED%96%88%EB%8A%94%EC%A7%80\" aria-label=\"어떻게 합류는 했는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 합류는 했는지</h3>\n<p>많은 분들께서 저 보곤 “어떻게 지금 회사를 들어가게 되었냐?”라고 물어보십니다.<br>\n저는 평소에 커뮤니케이션 그리고 커뮤니티 활동을 좋아해서 페이스북을 통해서 커뮤니티 활동을 하곤 합니다.<br>\n우연히 강성일 대표님을 페이스북 상에서 알게 되었고 대표님께서 먼저 제가 연락을 해 오셨습니다.<br>\n이후 많은 이야기를 하게 되었고 Slack 초대 되어 동향을 살피고 대표님께서 다양한 이야기를 전해 주셨습니다.<br>\n이런 다양한 이야기를 듣고 “나도 일원이 되어 보고 싶다.”라고 생각이 들어서 2021년 8월 6일에 사무실에 방문하여서 다양한 이야기를 나누고 계약을 하게 되었습니다.<br>\n그 이후 8월 9일에 계약을 하였습니다.</p>\n<h3 id=\"제주-워크샵\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%A3%BC-%EC%9B%8C%ED%81%AC%EC%83%B5\" aria-label=\"제주 워크샵 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제주 워크샵</h3>\n<p>2021년 11월 17일 부터 19까지 2박 3일 동안 제주도로 워크샵을 가게 되었습니다.<br>\n저는 지방에서 거주하고 있기에 광주 공항에서 제주 공항으로 갔었고 제주 공항에서 합류하여서 2박 3일 동안 지나게 되었습니다.<br>\n보다 팀원 분들과 많은 이야기를 나눌 수 있었고 다양한 곳들을 가면서 팀원 분들과 좋은 추억을 남길 수 있어서 좋았습니다. 워크샵 도중 기술과 관련된 이야기도 하였습니다.<br>\n<a href=\"https://docs.google.com/presentation/d/14PG5irIDjHa12mst20TOBdJHfnf_XQRls8LmpC6F8j4/edit?usp=sharing\"><strong>다른 회사에서는 마이크로서비스 아키텍처를 어떻게 운영하는가</strong></a>라는 주제로 간단한 이야기를 나누었습니다.<br>\n앞으로 마이크로서비스 아키텍처를 도입해야하는지 아니면 마이크로서비스가 아니어도 앞으로 서비스를 어떻게 운영하는게 좋은지에 대해서 팀원 분들과 이야기를 나누었습니다. 새벽까지 루미큐브를 했는데 너무나도 재밌었습니다. 평소에는\n사계항 등 다양한 곳들을 팀원 분들과 함께 돌아봤으며, 마지막 날에는 한라산도 갔다 와서 팀원 분들과 돈득한 시간이 되었습니다 :)<br>\n조금 힘들긴 했지만 재밌게 다녀왔고 하산 이후 바로 제주 공항으로 가서 집으로 안전하게 복귀하였습니다! 다음에도 기회가 있으면 팀원 분들과 함께 가고 싶습니다!</p>\n<h3 id=\"겨울방학-중의-2주-동안의-출근\" style=\"position:relative;\"><a href=\"#%EA%B2%A8%EC%9A%B8%EB%B0%A9%ED%95%99-%EC%A4%91%EC%9D%98-2%EC%A3%BC-%EB%8F%99%EC%95%88%EC%9D%98-%EC%B6%9C%EA%B7%BC\" aria-label=\"겨울방학 중의 2주 동안의 출근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>겨울방학 중의 2주 동안의 출근</h3>\n<p>저는 원래 리모트로 주로 일하고 있습니다. 제가 지방에 거주하고 있으며, 아직까지는 고등학생이라서 업무에 집중하지 않고 학업을 병행하며서 잠깐 동안 시간이 되면 회사 프로젝트를 병형하곤 했습니다.\n2021년(2022년 1월) 겨울 방학 동안 판교에서 지내면서 2주 동안 출 · 퇴근하며 지냈습니다.<br>\n팀장님과 대표님들께서 잘 챙겨 주셔서 보다 날씨는 춥지만 마음은 따듯한 2주 동안 기억이 납니다.  매년 겨울은 제가 살고 있던 지방 도시에서 보냈는데, 처음으로 타 지역에서 그것도 수도권에서 지내서 좋았습니다. 오피스가 있는 층에 창문이 큰 라운지가 있습니다. 따듯한 커피와 함께 눈 내리는 모습을 보며, 재밌었습니다.<br>\n저희 회사는 금요일은 16시 퇴근입니다. 처음으로 저녁에 한강공원을 갔습니다…! (지방에서 살던 저에겐 신기방기🤩)<br>\n한강공원에서 잠수교까지 걸어갔었고 잠수교에서 고속터미널역까지 걸어가서 판교로 복귀 했습니다. 지금까지 했고 있는 프로젝트인 ‘미디어 스토리지 프로젝트’를 본격적으로 시작하게 되었습니다!<br>\n챙겨주신 대표님, 그리고 팀장님 감사합니다🤍</p>\n<h3 id=\"미디어-스토리지-개발-프로젝트\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EA%B0%9C%EB%B0%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"미디어 스토리지 개발 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미디어 스토리지 개발 프로젝트</h3>\n<p>저희 회사는 실시간 미디어를 다루고 있습니다. WebRTC 기반의 실시간 미디어 시스템을 개발하고 있습니다.<br>\n실시간 미디어 시스템에서 녹화된 영상을 가공하고 저장하는 공간을 개발하고 있습니다.<br>\n저장되는 영상을 HLS(HTTP Live Streaming)로 변환하거나 mp4(h.264)으로 변환하고 AWS S3 버킷에 저장하고 영상들의 정보를 SQLite or MySQL에 저장될 수 있도록 수 개발하였습니다.\n좋은 기회가 있어서 제가 만든 시스템(솔류션)에 있어서 GDG Golang Korea Go1.18 릴리즈 파티에서 <strong>Go와 FFmpeg를 이용한 영상 처리 그리고 AWS S3 활용하기</strong>라는 주제로 발표하였습니다.<br>\n발표 내용과 후기가 궁금하시면 <a href=\"https://blog.teamgrit.kr/2022/04/20/gdg-golang-korea.html\">GDG Golang Korea Go1.18 릴리즈 파티 발표 후기)</a>를 읽어주시면 감사하겠습니다.</p>\n<h2 id=\"느낀점과-앞으로는-나의-모습\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90%EA%B3%BC-%EC%95%9E%EC%9C%BC%EB%A1%9C%EB%8A%94-%EB%82%98%EC%9D%98-%EB%AA%A8%EC%8A%B5\" aria-label=\"느낀점과 앞으로는 나의 모습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점과 앞으로는 나의 모습</h2>\n<p>제가 좋은 기회를 통해서 팀그릿에 합류하게 되어서 굉장히 기쁘고 제가 아직까지 부족한 부분은 많지만 회사 프로젝트를 하면서 부족한 부분을 채워나갈 수 있어서 좋은 것 같습니다.<br>\n앞으로 몇 년 동안 회사에 있을지 모르겠지만 열심히 공부하면서 개발하고 있습니다.\n앞으로는 회사에서 다양한 서비스(시스템)들을 개발하면서 다양한 것들을 배우고 공부 해야할 점들이 너무나도 많습니다. 부족한 부분들을 열심히 공부하면서 개발하도록 하겠습니다.\n요즘 회사에 새로 합류하시는 분들이 많아지고 있습니다. 다양한 분들께도 제가 배운 것들을 나누면서 즐겁게 그리고 행복하게 프로젝트를 진행하면서 지내도록 하겠습니다. 많은 부분을 아직까지 잘 모르고 부족하지만 항상 잘 알려주시고 더 알려주실려고 도와주시는 강성일 대표님과 개발팀 분들께 항상 감사드립니다. 그리고 항상 챙겨주시는 김기령 대표님과 운영팀 분들 감사합니다!<br>\n제가 앞으로 어떻게 될지 잘 모르겠지만 언젠간 회사를 떠나고 다른 회사에 있을 수도 있지만 현재 회사에서 제가 할 수 있는 최선의 방법을 열심히 프로젝트를 진행하고 개발하며 지금의 제게 만족하며 부족한 부분은 공부하며 살아가고자 합니다 :)</p>","frontmatter":{"date":"August 10, 2022","title":"1년 동안 스타트업에서 경험","categories":"회고","author":"HyunSang Park","emoji":"🏢"},"fields":{"slug":"/1-year-of-startup-experience/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"dev-hyunsang/dev-hyunsang.github.io"}}}}},"pageContext":{"slug":"/&-*-Operator/","nextSlug":"/Leave-an-efficient-log/","prevSlug":"/1-year-of-startup-experience/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}