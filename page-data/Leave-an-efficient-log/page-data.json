{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Leave-an-efficient-log/",
    "result": {"data":{"cur":{"id":"5e4f528a-5e79-571d-85a1-fc131cb89e51","html":"<p>안녕하세요. 요즘 회사에서 미디어 스토리지를 개발 하면서 드는 생각이 있습니다.<br>\n실제로 돌아가고 있는 서비스나 시스템에서는 로그를 어떻게 관리하며, 로그의 중요성을 파악하고 있습니다.<br>\n로그 시스템이 추후에 데이터 자산이 될 수도 있다는 생각과 더불어 추후에 개발을 하면서 어떻게 동작하고 어떤 오류가 있는지 명확하게 파악할 수 있다는 생각이 들어서 효율적으로 Go언어를 통해서 로그를 어떻게 남기면 좋을지에 대해서 이야기 해 보고자 합니다. 다소 부족하지만 읽어주시면 감사하겠습니다!</p>\n<h2 id=\"go언어에서-사용할-수-있는-logger는\" style=\"position:relative;\"><a href=\"#go%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-logger%EB%8A%94\" aria-label=\"go언어에서 사용할 수 있는 logger는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go언어에서 사용할 수 있는 Logger는?</h2>\n<p>Go언어에서 기본적으로 제공해 주는 Logger인 <code class=\"language-text\">log</code>가 있습니다. 기존적으로 제공되는 패키지는 몇 가지의 단점이 있어서 그러한 부족한 점들을 채우기 위해서 외부 Logger를 사용하시는 것을 추천드립니다.<br>\n찾아보고 많이 알아보니 다양한 Logger들이 있는데 개인 취향이나 서비스(시스템)에 더 좋은 패키지를 사용한 것 같아서 정리해 봅니다.</p>\n<ul>\n<li><a href=\"https://github.com/golang/glog\"><code class=\"language-text\">golang/gloag</code></a></li>\n<li><a href=\"https://github.com/uber-go/zap\"><code class=\"language-text\">uber-go/zap</code></a></li>\n<li><a href=\"https://github.com/rs/zerolog\"><code class=\"language-text\">rs/zerolog</code></a></li>\n</ul>\n<p>JSON 형식으로 출력되는 패키지도 있으며, 텍스트 형식으로 출력이 가능한 패키지들이 있습니다.<br>\n개발하는 방향에 따라서 사용하시면 될 것 같습니다. <strong>이 글에서는 <a href=\"https://github.com/uber-go/zap\"><code class=\"language-text\">uber-go/zap</code></a>을 사용할 예정입니다.</strong></p>\n<h2 id=\"logger를-사용-개발할-때-고려해야할-상황\" style=\"position:relative;\"><a href=\"#logger%EB%A5%BC-%EC%82%AC%EC%9A%A9-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC%ED%95%A0-%EC%83%81%ED%99%A9\" aria-label=\"logger를 사용 개발할 때 고려해야할 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logger를 사용, 개발할 때 고려해야할 상황</h2>\n<p>개발을 하면서 몇 개의 주의점과 기존 패키지의 단점들, 몇 가지를 알면 좋을 팁들을 전해 드리고자 합니다…!</p>\n<h3 id=\"기존의-문제점-해결하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"기존의 문제점 해결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존의 문제점 해결하기</h3>\n<p>Go언어에서 기본적으로 log 패키지를 지원 하지만 정확한 caller를 확인할 수 없다는 단점이 있습니다.<br>\n기존의 log 패키지를 사용할 경우에는 <code class=\"language-text\">logger/logger:42</code>와 같이 출력되어서 한 계층 위의 Caller 알 수 없다는 단점이 있었습니다.<br>\n그런 단점들을 보완할 수 있는 방법은 기본 패키지를 사용하지 않고 외부 패키지를 사용하여서 logger를 개발하는 방법이 더 좋은 선택일 수 있습니다.</p>\n<h3 id=\"로그-파일의-저정과-용량-문제\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%A0%80%EC%A0%95%EA%B3%BC-%EC%9A%A9%EB%9F%89-%EB%AC%B8%EC%A0%9C\" aria-label=\"로그 파일의 저정과 용량 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그 파일의 저정과 용량 문제</h3>\n<p>로그를 <code class=\"language-text\">.log</code>나 다른 파일들로 저장을 하였을 때 로컬에 저장하는 경우 용량의 범람으로 인해서 서버가 죽거나 클라우드 서비스를 이용하는 경우 클라우드 서비스 비용이 많이 들어갈 수도 있습니다.</p>\n<h3 id=\"가독성의-중요성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%8F%85%EC%84%B1%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"가독성의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가독성의 중요성</h3>\n<p>로그는 본질적으로 서비스의 구동 사항들을 기록하거나 아니면 오류 사항들을 출력할 때. 주로 로그를 사용한다고 이야기 할 수 있습니다.<br>\n그러므로 개발자가 손 쉽게 이해하고 오류를 해결할 수 있도록 해야하는 것 같습니다.<br>\n또한 로그 메시지를 규칙을 세워서 작성하시는 것을 추천합니다.</p>\n<h2 id=\"코드로-만들어-보기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"코드로 만들어 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드로 만들어 보기</h2>\n<p>일단의 저는 경우 logger 패키지를 통해서 개발할 예정입니다.<br>\n기본적인 디렉토리 구조는 이렇습니다. <code class=\"language-text\">go mod tidy</code>를 통해서 <code class=\"language-text\">go.mod</code> 파일을 만들어 주세요.</p>\n<h3 id=\"설치하기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go mod init \n$ go get -u go.uber.org/zap</code></pre></div>\n<p>zap 패키지를 사용할 수 있도록 명령어를 통해서 설치 해 주세요.</p>\n<h3 id=\"logger-패키지-개발하기\" style=\"position:relative;\"><a href=\"#logger-%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\" aria-label=\"logger 패키지 개발하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logger 패키지 개발하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tl         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>Logger\n\ts         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>SugaredLogger\n\tDebug     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfo      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarn      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tError     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tDebugf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfof     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarnf     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tErrorf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfoQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n\tWarnQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>개발의 생산성을 고려하여서 기본적으로 zap.SugaredLogger를 사용하여서 Logging 하기로 하였습니다.<br>\n필요한 변수들을 먼저 선언해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ZapSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to Logger Starting...\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매번 4줄의 코드를 치는 것보다 함수를 통해서 설정을 하는 것이 더 좋은 방법이라고 생각이 되어서 함수를 만들었습니다.<br>\n그럼 본격적으로 중요한 Zap에 대해서 개발해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\tdate <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\n\tlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n\n\tconfig <span class=\"token operator\">:=</span> zap<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>\n\t\tLevel<span class=\"token punctuation\">:</span>       zap<span class=\"token punctuation\">.</span><span class=\"token function\">NewAtomicLevelAt</span><span class=\"token punctuation\">(</span>zap<span class=\"token punctuation\">.</span>DebugLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tDevelopment<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tEncoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t\tOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEncoderConfig<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>EncoderConfig<span class=\"token punctuation\">{</span>\n\t\t\tLevelKey<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span>\n\t\t\tTimeKey<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n\t\t\tMessageKey<span class=\"token punctuation\">:</span>   <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n\t\t\tCallerKey<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n\t\t\tEncodeTime<span class=\"token punctuation\">:</span>   zapcore<span class=\"token punctuation\">.</span>ISO8601TimeEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeLevel<span class=\"token punctuation\">:</span>  zapcore<span class=\"token punctuation\">.</span>LowercaseLevelEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeCaller<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>ShortCallerEncoder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tl<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\ts <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">Sugar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tDebug <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debug\n\tInfo <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Info\n\tWarn <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warn\n\tError <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Error\n\tDebugf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debugf\n\tInfof <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Infof\n\tWarnf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warnf\n\tErrorf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Errorf\n\tInfoQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Info\n\tWarnQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Warn\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 개발하였습니다. 추후에 호출할 때 변수할 수 있도록 먼저 선언해 주는 함수에 넣어주었습니다.<br>\n<code class=\"language-text\">zap.Config</code>의 경우 각종 설정을 할 수 있도록 하였습니다.<br>\nEncoding의 경우 console 방식과 json 방식이 있습니다.\nconsole의 경우의 <code class=\"language-text\">2019-05-04T16:31:17.610+0900    INFO    test/zap.go:17  failed to Process       {\"err\": \"null exception\", \"attempt\": 3, \"duration\": \"1s\"}</code> 형식으로 출력 됩니다. JSON의 경우에는 <code class=\"language-text\">{\"level\":\"info\",\"time\":\"2021-12-16T21:05:04.766+0900\",\"path\":\"TeamGRIT-VMS/main.go:59\",\"message\":\"Starting Server...!\",\"time\":\"2021-12-16T21:05:04.766+0900\"}</code> 형식으로 출력됩니다.</p>\n<h3 id=\"log-파일과-콘솔-기록하기\" style=\"position:relative;\"><a href=\"#log-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EC%BD%98%EC%86%94-%EA%B8%B0%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"log 파일과 콘솔 기록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>log 파일과 콘솔 기록하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">date <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\nlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span></code></pre></div>\n<p>저는 날짜 형식으로 로그 파일의 이름을 만들어서 기록하였습니다. 다른 방식으로 지정하셔도 됩니다.<br>\n경로도 각자의 취향에 맞게 지정하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">Encoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\nOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\tlogFile<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\tlogFile<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>출력하기 위해서 <code class=\"language-text\">OutputPaths</code>와 <code class=\"language-text\">ErrorOutputPaths</code>를 설정해 주어야 합니다.<br>\n터미널에 출력하기 위해서는 <code class=\"language-text\">stdout</code>를 사용해야 합니다. 파일을 통해서 기록하기 위해서는 위에 지정하였던 <code class=\"language-text\">logFile</code>를 사용하여서 파일로 기록할 수 있습니다.<br>\n만약 터미널에만 출력하고 싶다면 <code class=\"language-text\">stdout</code>만 사용하시면 됩니다, 또 로그 파일에 기록만 하고 싶은 경우 <code class=\"language-text\">logFile</code>만 사용하시면 됩니다.\n두 개 다 사용하시고 싶으시면 <code class=\"language-text\">stdout</code>와 <code class=\"language-text\">logFile</code> 같이 사용할 수 있습니다.</p>\n<h2 id=\"최종-코드\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%BD%94%EB%93%9C\" aria-label=\"최종 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최종 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> logger\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\n\t<span class=\"token string\">\"go.uber.org/zap\"</span>\n\t<span class=\"token string\">\"go.uber.org/zap/zapcore\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tl         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>Logger\n\ts         <span class=\"token operator\">*</span>zap<span class=\"token punctuation\">.</span>SugaredLogger\n\tDebug     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfo      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarn      <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tError     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tDebugf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfof     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tWarnf     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tErrorf    <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>tmp1 <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tInfoQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n\tWarnQuick <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fields <span class=\"token operator\">...</span>zap<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ZapSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terr <span class=\"token operator\">:=</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to Logger Starting...\"</span><span class=\"token punctuation\">,</span> zap<span class=\"token punctuation\">.</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">LoggerSetUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\tdate <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2006-01-02\"</span><span class=\"token punctuation\">)</span>\n\tlogFile <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./log/%s-local.log\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n\n\tconfig <span class=\"token operator\">:=</span> zap<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>\n\t\tLevel<span class=\"token punctuation\">:</span>       zap<span class=\"token punctuation\">.</span><span class=\"token function\">NewAtomicLevelAt</span><span class=\"token punctuation\">(</span>zap<span class=\"token punctuation\">.</span>DebugLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tDevelopment<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tEncoding<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n\t\tOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tErrorOutputPaths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"stdout\"</span><span class=\"token punctuation\">,</span>\n\t\t\tlogFile<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tEncoderConfig<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>EncoderConfig<span class=\"token punctuation\">{</span>\n\t\t\tLevelKey<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span>\n\t\t\tTimeKey<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n\t\t\tMessageKey<span class=\"token punctuation\">:</span>   <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span>\n\t\t\tCallerKey<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n\t\t\tEncodeTime<span class=\"token punctuation\">:</span>   zapcore<span class=\"token punctuation\">.</span>ISO8601TimeEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeLevel<span class=\"token punctuation\">:</span>  zapcore<span class=\"token punctuation\">.</span>LowercaseLevelEncoder<span class=\"token punctuation\">,</span>\n\t\t\tEncodeCaller<span class=\"token punctuation\">:</span> zapcore<span class=\"token punctuation\">.</span>ShortCallerEncoder<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tl<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\ts <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">Sugar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tDebug <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debug\n\tInfo <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Info\n\tWarn <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warn\n\tError <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Error\n\tDebugf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Debugf\n\tInfof <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Infof\n\tWarnf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Warnf\n\tErrorf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>Errorf\n\tInfoQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Info\n\tWarnQuick <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>Warn\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참고한-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EC%9E%90%EB%A3%8C\" aria-label=\"참고한 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 자료</h2>\n<ul>\n<li><a href=\"https://docs.google.com/document/d/1jYNFSTC7-c21-RFBad3qCmQu0Arm-nxk7F1TS-h4Nds/\">직접 만든 Logger 안에서 zap 라이브러리를 사용할 때 Caller에 Logger 보다 위의 계층을 출력하는 방법</a>\n<ul>\n<li>많은 부분 참고한 문서입니다.</li>\n</ul>\n</li>\n<li><a href=\"https://wookiist.dev/110\">[Go/Golang] Zap과 시간 기반 파일 로테이션 로깅 수행하기</a></li>\n<li><a href=\"https://minwook-shin.github.io/go-structured-leveled-logging-zap/\">Golang structured leveled 로그 zap 라이브러리 알아보기</a></li>\n</ul>","excerpt":"안녕하세요. 요즘 회사에서 미디어 스토리지를 개발 하면서 드는 생각이 있습니다. 실제로 돌아가고 있는 서비스나 시스템에서는 로그를 어떻게 관리하며, 로그의 중요성을 파악하고 있습니다. 로그 시스템이 추후에 데이터 자산이 될 수도 있다는 생각과 더불어 추후에 개발을 하면서 어떻게 동작하고 어떤 오류가 있는지 명확하게 파악할 수 있다는 생각이 들어서 효율적으로 Go언어를 통해서 로그를 어떻게 남기면 좋을지에 대해서 이야기 해 보고자 합니다. 다소 부족하지만 읽어주시면 감사하겠습니다! Go언어에서 사용할 수 있는 Logger는? Go언어에서 기본적으로 제공해 주는 Logger인 가 있습니다. 기존적으로 제공되는 패키지는 몇 가지의 단점이 있어서 그러한 부족한 점들을 채우기 위해서 외부 Logger를 사용하시는 것을 추천드립니다. 찾아보고 많이 알아보니 다양한 Logger들이 있는데 개인 취향이나 서비스(시스템)에 더 좋은 패키지를 사용한 것 같아서 정리해 봅니다.    JSON 형식으로…","frontmatter":{"date":"December 17, 2021","title":"Go언어에서 효율적인 로그 남기기","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/Leave-an-efficient-log/"}},"next":{"id":"e9478dbf-e763-578e-afbc-b115b82873bd","html":"<p>올해(2021년)는 다양한 일들이 이었으며, 다양한 일들과 더불어 저의 생각들을 기록해 보고 2021년을 마무리 지어보려고 합니다.<br>\n저는 아직도 많은 부족한 사람이지만 조금씩 부족한 부분을 채워 나가려고 합니다. 올해 부족한 부분을 채운 것을 기록하고 고찰하고 회고하고자 합니다.<br>\n개인적인 생각과 제가 2021년에 해던 행동, 일들에 대해서 이야기를 작성하였습니다.</p>\n<h2 id=\"인류와-공존하는-바이러스-코로나19\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%A5%98%EC%99%80-%EA%B3%B5%EC%A1%B4%ED%95%98%EB%8A%94-%EB%B0%94%EC%9D%B4%EB%9F%AC%EC%8A%A4-%EC%BD%94%EB%A1%9C%EB%82%9819\" aria-label=\"인류와 공존하는 바이러스 코로나19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인류와 공존하는 바이러스, 코로나19</h2>\n<p>2021년 회고를 쓰면서 2020년 이야기가 잠깐 나올 것 같습니다ㅎㅎ<br>\n2020년 초, 중국에서 코로나19와 관련되어서 뉴스 기사가 많이 뜨고 있었습니다. 저는 관심이 없었고 한참 기사가 뜨고 있을 때 부산에서 1박 2일 일정으로 행사가 있어서 부산에 있었습니다.<br>\n부산을 방문한 후 겨울 감기 + 인후염(?)으로 인해서 몸 상태가 안 좋았고 발열을 동반하고 있어서 병원에 가서 약을 받았고 의사 선생님의 처방 중 마스크를 쓰고 다니라는 말을 듣고 마스크를 덴탈 마스크 2봉지를 사게. 됩니다. 약을 먹고 감기과 인후염은 괜찮아졌고 마스크를 산 행동이 신의 한 수였습니다.<br>\n2020년은 코로나19로 인해서 많은 제약을 받게 되었고 본래는 학교 개학일이 3월 중순이었는데 6월 중순까지 온라인 클래스로 진행하였고, 1학기의 4분에 3을 집에서 온라인 클래스를 들으며 보낸 것 같습니다.<br>\n2020년 한 해에 코로나19가 끝날 줄 알았지만 2021년은 물론이고 앞으로도 어떻게 될지 모르겠네요. 많은 컨퍼런스와 대회들이 온라인으로 진행 되었으며 다양한 분들을 만나지 못 하였고 다양한 경험들도 못한 것 같습니다.<br>\n학사 일정 중 체험학습, 수학여행, 수련회, 체육대회 등은 무산 되었고 앞으로도 없을 것 같습니다. 하지만 종종 많은 분들은 아니지만 제가 만나뵙고 싶은 분들은 만나뵙고자 합니다!</p>\n<h2 id=\"새로운-목표와-새로운-프로그래밍-언어\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%AA%A9%ED%91%9C%EC%99%80-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4\" aria-label=\"새로운 목표와 새로운 프로그래밍 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 목표와 새로운 프로그래밍 언어</h2>\n<p>우연히 페이스북으로 팀그릿 CTO 강성일 대표님을 알게 되었고 강성일 대표님께서 Go언어에 대해서 말씀해 주셔서 관심이 생겨서 공부하게 되었습니다.<br>\nGo언어를 학습할 수 있도록 강성일 대표님께서 서적도 보내주셔서 대표님께서 보내주신 서적을 보고 Go언어에 대해서 관심이 더 생겼게 되었고 현재까지 5~6개월 정도 지속적으로 공부를 하였고 수 많은 프로젝트를 진행하였습니다. 원래는 프로그래밍 언어에 대해서 이것저것 하다보니 깊게 있는 공부를 하지 못 하였습니다, 그래서 “Go언어만큼은 깊게 해 보고 많은 것들을 공부하고 배워야겠다”라는 결심을 하였습니다.<br>\n요즘은 gRPC와 백엔드를 공부하고 있으며, 추후 목표로는 Go언어로 Kubernetes 관련 프로젝트를 진행하는 것을 목표로 하고 있습니다.</p>\n<h2 id=\"다리-골절ㅠ\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A6%AC-%EA%B3%A8%EC%A0%88%E3%85%A0\" aria-label=\"다리 골절ㅠ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다리 골절…ㅠ</h2>\n<p>학교 체육시간에 농구를 하던 도중 아래 물건이 있는지 모르고 착지를 하다가 골절 되어서 통깁스를 하게 되었습니다.<br>\n약 한 달 정도 반깁스와 통깁스을 하였습니다…ㅠ 그것도 장마 기간에 ㅠㅠ</p>\n<h2 id=\"새로운-도전-팀그릿-합류\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8F%84%EC%A0%84-%ED%8C%80%EA%B7%B8%EB%A6%BF-%ED%95%A9%EB%A5%98\" aria-label=\"새로운 도전 팀그릿 합류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 도전, 팀그릿 합류</h2>\n<p>팀그릿의 강성일 대표님께서 방학 중 회사에 방문하여서 한 번 이야기 나누면 어떻게냐고 물어보셔서 8월 중 팀그릿 사무실에 방문하여서 대표님과 미팅을 하였고 그 이후로 계약을 하여서 팀그릿에 합류 하게 되었습니다.<br>\n아직 고등학생 신분이고 “아직까진 프로그래밍을 잘한다.”라는 느낌이 없기 때문에 함께 팀그릿 분들과 함께 배우면서 다양한 일들을 하고 싶었고 지금은 그러고 있는 것 같아서 만족하고 있습니다.<br>\n현재는 팀그릿 시스템 중 미디어 스토리지인 Cockroach(and TeamGRIT VCMS)를 개발하고 있므며, 내년 초에 완벽하게 설계 및 개발 후 실제 서비스에 적용할 수 있도록 개발하고 있습니다.</p>\n<h2 id=\"아름다운-도시-서울\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%A6%84%EB%8B%A4%EC%9A%B4-%EB%8F%84%EC%8B%9C-%EC%84%9C%EC%9A%B8\" aria-label=\"아름다운 도시 서울 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아름다운 도시, 서울</h2>\n<p>팀그릿 사무실을 방문하고 나서 저녁시간에 시간을 내서 친한 친구와 함께 롯데 타워를 방문하였습니다.<br>\n일몰 시간에 올라가서인지 더 이쁘고 더 좋은 것 같습니다. 올해 갔던 곳 중에 가장 인상 깊고 년 초에 특별한 일정이 없으면 한 번 다시 가 보고자 합니다.<br>\n코로나19로 인해서 많은 곳을 방문하지 못 했지만 친한 친구나 저 혼자 서울을 돌아볼려고 합니다 ㅎㅎ<br>\n중학생 때부터 서울에 행사 있으면 많이 왔는데 아직까지도 못 가 본 곳이 너무 많네요…ㅠ</p>\n<h2 id=\"새로운-취미-사진-찍기\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%B7%A8%EB%AF%B8-%EC%82%AC%EC%A7%84-%EC%B0%8D%EA%B8%B0\" aria-label=\"새로운 취미 사진 찍기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 취미, 사진 찍기</h2>\n<p>기존에 사진을 찍는 것을 좋아했고 중학교 때 방송부 활동을 통해서 다양한 사진들을 찍었고 학교 활동을 기록하였습니다.<br>\n팀그릿 합류한 이후 한 달에 한 번씩 주말에 서울에 올라가서 미팅을 자주하는 일이 생기게 되었고 서울에 가서 서울의 풍경들을 담고 싶은 마음이 들어서 기존의 있던 카메라에 새로운 렌즈를 구매하여서 본격적으로 사진으로. 기록을 하게 되었습니다.<br>\n사진은 인스타그램 <a href=\"https://www.instagram.com/im_hyun.sang/\">im_hyun.sang</a>에서 보실 수 있습니다.</p>\n<h2 id=\"다시-독서를-시작하다\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%8B%9C-%EB%8F%85%EC%84%9C%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8B%A4\" aria-label=\"다시 독서를 시작하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다시 독서를 시작하다</h2>\n<p>원래는 기술 서적만 많이 읽고 있었습니다. 하지만 다양한 책을 읽고 싶다는 생각이 들어서 밀리의 서재와 더불어서 종이책을 통해서 독서를 하였습니다.<br>\n년 초에도 독서를 하였지만 꾸준히 읽지 않았아서 금방 포기하였고 년말에 다시 본격적으로 읽게 되었습니다.\n현재까지는 유시민 선생님의 서적이 너무 좋아서 유시민 선생님의 책을 주로 읽고 있습니다.<br>\n<a href=\"http://parkhyunsang.com/links/books.html\">읽은 책 목록 보러 가기</a>에서 제가 읽고 있는 책들을 보실 수 있습니다.</p>\n<h2 id=\"팀그릿-제주도-워크샵\" style=\"position:relative;\"><a href=\"#%ED%8C%80%EA%B7%B8%EB%A6%BF-%EC%A0%9C%EC%A3%BC%EB%8F%84-%EC%9B%8C%ED%81%AC%EC%83%B5\" aria-label=\"팀그릿 제주도 워크샵 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팀그릿 제주도 워크샵</h2>\n<p>10월 미팅 중 대표님께서 11월 중으로나 확정되지 않았지만 제주도로 워크샵을 갈 계획이 있다고 하셔서 알고는 있었었습니다.<br>\n다행히도 위드 코로나와 수능으로 인한 온라인 클래스로 인해서 회사 분들과 함께 제주도로 갈 수 있게 되었고 회사에서 항공권을 주셔서 제주로 향하게 되었습니다.<br>\n저는 목포에 살고 있기 때문에 광주공항에서 제주공항으로 넘어갔고 제주공항에서 회사 분들과 합류하였습니다.<br>\n워크샵 중 자유주제로 발표를 하는 기회가 있었는데 저는 마이크로서비스 아키텍처에 대해서 다른 회사들은 어떻게 마이크로서비스 아키텍처를 사용하고 있는지에 대해서 발표하게 되었습니다.<br>\n그리고 2022년에는 회사의 목표와 고민점들을 함께 나누고 다양한 의견들을 들어볼 수 있어서 좋았습니다.</p>\n<h2 id=\"기록하는-습관\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94-%EC%8A%B5%EA%B4%80\" aria-label=\"기록하는 습관 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기록하는 습관</h2>\n<p>사진도 기록을 하기 위해서 갖게 되었고 “기록을 하지 않으면 남는게 없다”라는 생각을 하게 되었습니다.<br>\n“개발과 관련된 각종 글들과 개발과 관련된 컨퍼런스들을 기록해 보면 어떨까”라는 생각이 들어서 기존에 있던 블로그를 수정하여서 활용도가 높게 수정하였고 각종 글과 컨퍼런스 영상을 기록하였습니다.<br>\n주변 사람들에게 공유하는 경우도 종종 있었는데 사람들이 “너 되게 꼼꼼하군아”라는 말을 하였는데 실상은 종종 꼼꼼할 때도 있지만 덜렁 되는 경우가 더 많은 것 같습니다…ㅠ</p>\n<h2 id=\"유시민-그를-존경하다\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%8B%9C%EB%AF%BC-%EA%B7%B8%EB%A5%BC-%EC%A1%B4%EA%B2%BD%ED%95%98%EB%8B%A4\" aria-label=\"유시민 그를 존경하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유시민, 그를 존경하다</h2>\n<p>저는 일단 정치인과 정치적 행보를 존경한다는 의미가 아닌 작가이자 사람으로써 존경하며, 그의 문학적 가치는 높은 것 같습니다.<br>\n유시민 선생님을 본격적으로 존경하게 된 이유는 국가란 무엇인가와 어떻게 살 것인가를 읽게 된 이후 존경하게 된 것 같습니다.<br>\n여기서 <a href=\"https://ko.wikipedia.org/wiki/%EC%84%9C%EC%9A%B8%EB%8C%80_%ED%94%84%EB%9D%BD%EC%B9%98_%EC%82%AC%EA%B1%B4\">서울대 프락치 사건</a>에 연류된 유시민 선생님의 항고 이유서를 읽고서 더욱 더 문학적으로 존경하게 된 것 같습니다. 항고 이유서를 유시민 본인이 직접 작성하였고 퇴고를 한 번도 하지 않고 작성하여서 놀랐습니다.</p>\n<blockquote>\n<p>슬픔도 노여움도 없이 살아가는 자는 조국을 사랑하고 있지 않다.</p>\n</blockquote>\n<p>1985년 5월 27일<br>\n유 시 민<br>\n서울형사지방법원 항소 제5부 재판장님 귀하</p>\n<h2 id=\"행복을-고찰하다\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%B3%B5%EC%9D%84-%EA%B3%A0%EC%B0%B0%ED%95%98%EB%8B%A4\" aria-label=\"행복을 고찰하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행복을 고찰하다</h2>\n<p>유시민 선생님의 <a href=\"http://www.yes24.com/Product/Goods/8638926\">어떻게 살 것인가?</a>를 읽고서 많은 생각이 들었습니다. 앞으로 어떻게 살아야 할지, 살면서 무엇을 해야할지 등을 생각하게 되었습니다.<br>\n아직은 어리지만 살면서 생각보다 많은 사람들을 만나 보았고 많은 곳을 가서 경험 해 본 것 같습니다.<br>\n다양한 사람들의 생각을 전부 다 읽을 순 없지만 나름대로의 인간관계와 앞으로 진로에 대해서 많은 생각을 하고 있습니다.<br>\n제 자신이 만족하고 자기주체적인 삶을 설계하고 살아가기 위해서 노력하고 있습니다.<br>\n자신이 좋아하는 것들을 하고 자신이 행복한 삶을 살아겠다는 생각과 함께 다른 사람의 시선을 너무 인식하지 않고 살기로 마음 먹었습니다.<br>\n좋은 점은 배우고 나쁜 점들은 고찰하면서 조심해야겠다라는 생각이 들었습니다.</p>\n<h2 id=\"올해-첫-눈\" style=\"position:relative;\"><a href=\"#%EC%98%AC%ED%95%B4-%EC%B2%AB-%EB%88%88\" aria-label=\"올해 첫 눈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>올해 첫 눈</h2>\n<p>2021년 12월 18일, 점점 겨울이 되고 있었지만 갑작스럽게 눈이 엄청나게 와서 생각보다 빠른 첫 눈을 빠르게 많이 하는 것 같아서 기분이 좋았습니다.<br>\n어렸을 땐 1월 달 중순 정도에 첫 눈을 맞이하는 것 같은데 생각보다 빨리 찾아와서 좋았습니다. 이쁜 크리마스 트리와 눈을 함께 봐서 화이트 크리스마스를 느낌이 나서 좋았습니다. 다들 메리 크리스마스! 그리고 감기 조심하세요…!!</p>\n<h2 id=\"2022년-목표\" style=\"position:relative;\"><a href=\"#2022%EB%85%84-%EB%AA%A9%ED%91%9C\" aria-label=\"2022년 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2022년 목표</h2>\n<p>쓰다보니 많이 길어져 버렸네요, “새로운”이라는 주어도 보이지만 아직은 많은 것 같진 않습니다. 완벽한 사람이 될 순 없지만 조금씩 완벽해 지기 위해서 2022년도 제가 할 수 있을 만큼 최대한의 노력을 할려고 합니다.<br>\n일단 올해 목표로 한 것은 “한 프로그래밍 언어라도 잘하자”라는 마인드로 한 해를 보냈으며 다른 언어를 별로 사용하지 않고 Go언어만 만진 것 같아서 잘했다라고 생각합니다.<br>\n2021년에 이루지 못한 것들을 2022년에 이루고자 합니다. 소프웨어 엔지니어링을 공부 하면서 영어 실력이 부족하다라는 것을 알게 되었습니다.<br>\n한국어로 작성된 글(문서, 영상)들도 많지만 더 넓게 보기 위해서는 영어 실력도 필수인 것을 느꼈습니다. 2022년에는 영어에 관심이 있는 것을 증폭 시켜서 더 공부하고자 합니다.<br>\n또한 올해 발표를 할 수 있는 기회가 없어서 2022년에는 Go언어에 대해서 발표할 수 있는 기회가 있다면 회사 했던 프로젝트나 개인적으로 진행하였던 프로젝트를 발표하고자 합니다.<br>\n대입과 관련되어서 대입에 대한 준비도 하고자 합니다, 부족한 성적이지만 최대한 좋은 대학교를 갈 수 있게 후회 없게 하고자 합니다.<br>\n그리고 친하게 지내고 있는 주변 사람들에게 더 따듯해 지려고 합니다. 어떨 땐 엉뚱하기도 하지만 어떨 땐 화도 내기도 합니다. 친해서 그런 것 같습니다 ㅠ<br>\n조금 더 부족한 점을 채우고 따듯한 사람이 될 수 있도록 하겠습니다. 아직은 많이 부족하고 생각도 어리고 그렇습니다. 조금씩 더 성장하고 따듯한 사람이 되기 위해서 노력하겠습니다.<br>\n남은 2021년 잘 마무리 하시고 2022년 새해 복 많이 받으시고 코로나19와 감기 조심하세요!<br>\n완벽하진 않지만 보다 완벽한 사람이 되기 위해서 노력한 사람이 되겠습니다.</p>","frontmatter":{"date":"December 11, 2021","title":"2021년 회고","categories":"회고","author":"HyunSang Park","emoji":"🎞"},"fields":{"slug":"/return-my-2021/"}},"prev":{"id":"6f4e1a54-1ee5-5fda-9cd5-461e0f86b9de","html":"<p>안녕하세요. Go언어를 사용하면서 궁금증 생겨서 궁금증을 해결하고자 작성하게 되었습니다.<br>\n<code class=\"language-text\">&amp;</code>와 <code class=\"language-text\">*</code>는 무엇을 뜻하고 ㄴ무엇을 하는지에 대해서 궁금증이 생겨서 찾아 보았습니다.<br>\n또한 포인터에 대해서 궁금증이 생겨서 찾아보고 공부한 내용들을 작성해 보았습니다.</p>\n<p><strong>참고한 글로써는 아래와 같습니다.</strong></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38172661/what-is-the-meaning-of-and\">Stack Overflow - What is the meaning of ’*’ and ’&#x26;‘?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49572378/what-does-the-and-symbol-in-go-mean\">Stack Overflow - What does the ’*’ and ’&#x26;’ symbol in Go mean?</a></li>\n<li><a href=\"https://go.dev/tour/moretypes/1\">golang.org - Pointers</a></li>\n</ul>\n<h2 id=\"일단-pointer는-무엇인가\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%8B%A8-pointer%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"일단 pointer는 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일단 Pointer는 무엇인가?</h2>\n<p>포인터(Pointer)는 프로그래밍 언어에서 다른 변수, 혹은 그 변수의 메모리 공간 주소를 가리키는 변수를 말합니다.<br>\n포인터가 가리키는 값을 가져오는 것을 역참조라고 합니다.<br>\n포인터는 어셈블리어와 C, C++, 파스칼 등에서 하위 레벨까지 제어할 수 있는 언어에서 주로 쓰이고 있습니다.<br>\n일반적으로 포인터는 메모리 주소로 바꿀 수 있습니다. 포인터는 다른 변수나 함수를 가리키도록 사용합니다.</p>\n<h3 id=\"주소값의-이해\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%86%8C%EA%B0%92%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\"주소값의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주소값의 이해</h3>\n<p>데이터의 주소값이란 해당 데이터가 저장된 메모리의 시작 주소를 의미합니다.<br>\nC언어에서는 이러한 주소값을 1바티으 크기의 메모리 공간으로 나누어 표현합니다.<br>\n예를 들어, int형 데이터는 4바이트의 크기를 가지지만, int형 데이터의 주소값은 시작 주소 1바이트만을 가리킵니다.</p>\n<h2 id=\"go언어에서의-포인터\" style=\"position:relative;\"><a href=\"#go%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0\" aria-label=\"go언어에서의 포인터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go언어에서의 포인터</h2>\n<p>Go언어는 프로그램 내에서 값의 참조와 레코드를 전달할 수 있는 <a href=\"https://ko.wikipedia.org/wiki/%ED%8F%AC%EC%9D%B8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">Pointers</a>를 지원합니다. 예제 보면서 함께 알아 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">zeroval</span><span class=\"token punctuation\">(</span>ival <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tival <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">zeroptr</span><span class=\"token punctuation\">(</span>iptr <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>iptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initial:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">zeroval</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeroval:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">zeroptr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zeroptr:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointer:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div align=\"center\">\n<p style=\"font-size: 14px; color: gray;\"><a herf=\"https://mingrammer.com/gobyexample/pointers/\">Go by Example: 포인터</a> 예제와 설명을 참고하였습니다.</p>\n</div>\n<p>두 함수 zeroval와 zeroptr를 가지고 포인터가 값과 다르게 어떻게 동작하는지 살펴 보겠습니다. zeroval은 int 타입 파라미터를 가지므로 인자는 값으로 전달됩니다. zeroval는 함수를 호출할 때의 값을 ival에 복사하여서 가져오게 됩니다.</p>\n<p>그에 반해서 zeroptr는 <code class=\"language-text\">int</code>형 포인터를 받을 수 있또록 <code class=\"language-text\">*int</code>타입을 파라미터로 갖고 있습니다.<br>\n함수 안에서 <code class=\"language-text\">*iptr</code>는 메모리 주소에서 해당 주소의 현재값으로 포인터를 역참조(dereference) 합니다. 역참조된 포인터에 값을 할당하면 이는 참조된 주소의 값을 바꾸게 됩니다.</p>\n<p>&#x26;i는 i의 메모리 주소를 반환합니다. 즉 i의 포인터입니다.<br>\n포인터도 <code class=\"language-text\">fmt</code> 패키지를 통해서 출력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ go run pointers.go\ninitial: <span class=\"token number\">1</span>\nzeroval: <span class=\"token number\">1</span>\nzeroptr: <span class=\"token number\">0</span>\npointer: 0x42131100</code></pre></div>\n<p>zeroval은 <code class=\"language-text\">main</code>에 있는 i값을 바꾸지 않지만, <code class=\"language-text\">zeroptr</code>은 해당 값의 메모리 주소를 참조하고 있기 때문에 값을 바꿀 수 있습니다.</p>\n<h2 id=\"참고한-문서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%9C-%EB%AC%B8%EC%84%9C\" aria-label=\"참고한 문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고한 문서</h2>\n<ul>\n<li><a href=\"https://mingrammer.com/gobyexample/pointers/\">Go by Example: 포인터</a></li>\n<li><a href=\"https://stackoverflow.com/questions/38172661/what-is-the-meaning-of-and\">Stack Overflow - What is the meaning of ’*’ and ’&#x26;‘?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49572378/what-does-the-and-symbol-in-go-mean\">Stack Overflow - What does the ’*’ and ’&#x26;’ symbol in Go mean?</a></li>\n<li><a href=\"https://go.dev/tour/moretypes/1\">golang.org - Pointers</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%ED%8F%AC%EC%9D%B8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">위키백과 - 포인터 (프로그래밍)</a></li>\n<li><a href=\"http://www.tcpschool.com/c/c_pointer_intro\">TCPShool.com - 포인터의 개념</a></li>\n</ul>","frontmatter":{"date":"January 01, 2022","title":"Go언어에서 &와 *는 무엇을 뜻할까?","categories":"Golang","author":"HyunSang Park","emoji":"🧑🏻‍💻"},"fields":{"slug":"/&-*-Operator/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"dev-hyunsang/dev-hyunsang.github.io"}}}}},"pageContext":{"slug":"/Leave-an-efficient-log/","nextSlug":"/return-my-2021/","prevSlug":"/&-*-Operator/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}